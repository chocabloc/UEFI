Binary file bits/bits-zip/bits-2001/boot/grub/i386-pc/pxe.mod matches
Binary file bits/bits-zip/bits-2001/bits-2001.iso matches
Binary file bits/bits-zip/pd/boot/grub/i386-pc/pxe.mod matches
bits/deps/python/Include/pyport.h:#if defined(X87_DOUBLE_ROUNDING) && !defined(HAVE_PY_SET_53BIT_PRECISION)
bits/deps/python/Include/pymath.h:#  ifdef X87_DOUBLE_ROUNDING
bits/deps/python/Doc/whatsnew/2.7.rst:  on certain 32-bit Intel chips and defines a :c:macro:`X87_DOUBLE_ROUNDING`
bits/deps/python/Lib/test/test_math.py:HAVE_DOUBLE_ROUNDING = (x + y == 1e16 + 4)
bits/deps/python/Lib/test/test_math.py:    @unittest.skipIf(HAVE_DOUBLE_ROUNDING,
bits/deps/python/pyconfig.h.in:#undef X87_DOUBLE_ROUNDING
bits/deps/python/configure:$as_echo "#define X87_DOUBLE_ROUNDING 1" >>confdefs.h
bits/deps/python/Python/pymath.c:#ifdef X87_DOUBLE_ROUNDING
bits/deps/python/configure.ac:  AC_DEFINE(X87_DOUBLE_ROUNDING, 1,
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_START_UNDI			0x0000
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_STARTUP			0x0001
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_CLEANUP			0x0002
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_INITIALIZE		0x0003
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_RESET_NIC		0x0004
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_SHUTDOWN		0x0005
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_OPEN			0x0006
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_CLOSE			0x0007
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_TRANSMIT		0x0008
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_SET_MCAST_ADDR		0x0009
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_SET_STATION_ADDR	0x000A
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_SET_PACKET_FILTER	0x000B
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_INFORMATION		0x000C
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_STATISTICS		0x000D
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_CLEAR_STATISTICS	0x000E
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_INITIATE_DIAGS		0x000F
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_FORCE_INTERRUPT		0x0010
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_MCAST_ADDR		0x0011
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_NIC_TYPE		0x0012
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_IFACE_INFO		0x0013
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_ISR			0x0014
bits/deps/grub/include/grub/i386/pc/pxe.h:#define	GRUB_PXENV_STOP_UNDI			0x0015
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_STATE		0x0015
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_KEEP_UNDI				0x04
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_INVALID_FUNCTION			0x60
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_MEDIATEST_FAILED			0x61
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_INIT_NIC_FOR_MCAST	0x62
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_INITIALIZE_NIC		0x63
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_INITIALIZE_PHY		0x64
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_READ_CONFIG_DATA		0x65
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_READ_INIT_DATA		0x66
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_BAD_MAC_ADDRESS			0x67
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_BAD_EEPROM_CHECKSUM		0x68
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_ERROR_SETTING_ISR		0x69
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_INVALID_STATE			0x6A
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_TRANSMIT_ERROR			0x6B
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_INVALID_PARAMETER		0x6C
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_NO_UNDI_ROMID			0xC4
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_BAD_UNDI_ROMID			0xC5
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_BAD_UNDI_DRIVER_IMAGE		0xC6
bits/deps/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_UNDI_START			0xCA
bits/deps/grub/include/grub/i386/pc/pxe.h:  grub_uint16_t	undi_data_seg;	/* UNDI Data segment address.  */
bits/deps/grub/include/grub/i386/pc/pxe.h:  grub_uint16_t	undi_data_size;	/* UNDI Data segment size (bytes).  */
bits/deps/grub/include/grub/i386/pc/pxe.h:  grub_uint16_t	undi_code_seg;	/* UNDI Code segment address.  */
bits/deps/grub/include/grub/i386/pc/pxe.h:  grub_uint16_t	undi_code_size;	/* UNDI Code segment size (bytes).  */
bits/deps/grub/ChangeLog:	Terminate UNDI and PXE before launching the payload to avoid problems
bits/deps/grub/grub-core/net/drivers/i386/pc/pxe.c:      grub_pxe_call (GRUB_PXENV_UNDI_ISR, isr, pxe_rm_entry);
bits/deps/grub/grub-core/net/drivers/i386/pc/pxe.c:      grub_pxe_call (GRUB_PXENV_UNDI_ISR, isr, pxe_rm_entry);
bits/deps/grub/grub-core/net/drivers/i386/pc/pxe.c:      grub_pxe_call (GRUB_PXENV_UNDI_ISR, isr, pxe_rm_entry);
bits/deps/grub/grub-core/net/drivers/i386/pc/pxe.c:      grub_pxe_call (GRUB_PXENV_UNDI_ISR, isr, pxe_rm_entry);
bits/deps/grub/grub-core/net/drivers/i386/pc/pxe.c:      grub_pxe_call (GRUB_PXENV_UNDI_ISR, isr, pxe_rm_entry);
bits/deps/grub/grub-core/net/drivers/i386/pc/pxe.c:  grub_pxe_call (GRUB_PXENV_UNDI_TRANSMIT, trans, pxe_rm_entry);
bits/deps/grub/grub-core/net/drivers/i386/pc/pxe.c:    grub_pxe_call (GRUB_PXENV_UNDI_CLOSE,
bits/deps/grub/grub-core/net/drivers/i386/pc/pxe.c:  grub_pxe_call (GRUB_PXENV_UNDI_OPEN, ou, pxe_rm_entry);
bits/deps/grub/grub-core/net/drivers/i386/pc/pxe.c:    return grub_error (GRUB_ERR_IO, "can't open UNDI");
bits/deps/grub/grub-core/net/drivers/i386/pc/pxe.c:  grub_pxe_call (GRUB_PXENV_UNDI_CLOSE,
bits/deps/grub/grub-core/net/drivers/i386/pc/pxe.c:  grub_pxe_call (GRUB_PXENV_UNDI_SHUTDOWN,
bits/deps/grub/grub-core/net/drivers/i386/pc/pxe.c:  grub_pxe_call (GRUB_PXENV_UNDI_GET_INFORMATION, ui, pxe_rm_entry);
bits/deps/grub/grub-core/gnulib/vasnprintf.c:                        DECL_LONG_DOUBLE_ROUNDING
bits/deps/grub/grub-core/gnulib/vasnprintf.c:                        BEGIN_LONG_DOUBLE_ROUNDING ();
bits/deps/grub/grub-core/gnulib/vasnprintf.c:                        END_LONG_DOUBLE_ROUNDING ();
bits/deps/grub/grub-core/gnulib/vasnprintf.c:                        DECL_LONG_DOUBLE_ROUNDING
bits/deps/grub/grub-core/gnulib/vasnprintf.c:                        BEGIN_LONG_DOUBLE_ROUNDING ();
bits/deps/grub/grub-core/gnulib/vasnprintf.c:                                    END_LONG_DOUBLE_ROUNDING ();
bits/deps/grub/grub-core/gnulib/vasnprintf.c:                                            END_LONG_DOUBLE_ROUNDING ();
bits/deps/grub/grub-core/gnulib/vasnprintf.c:                                            END_LONG_DOUBLE_ROUNDING ();
bits/deps/grub/grub-core/gnulib/vasnprintf.c:                                            END_LONG_DOUBLE_ROUNDING ();
bits/deps/grub/grub-core/gnulib/vasnprintf.c:                                            END_LONG_DOUBLE_ROUNDING ();
bits/deps/grub/grub-core/gnulib/vasnprintf.c:                        END_LONG_DOUBLE_ROUNDING ();
Binary file bits/bits-latest.iso matches
bits/build/python-host/Include/pyport.h:#if defined(X87_DOUBLE_ROUNDING) && !defined(HAVE_PY_SET_53BIT_PRECISION)
bits/build/python-host/Include/pymath.h:#  ifdef X87_DOUBLE_ROUNDING
bits/build/python-host/Doc/whatsnew/2.7.rst:  on certain 32-bit Intel chips and defines a :c:macro:`X87_DOUBLE_ROUNDING`
bits/build/python-host/pyconfig.h:/* #undef X87_DOUBLE_ROUNDING */
bits/build/python-host/Lib/test/test_math.py:HAVE_DOUBLE_ROUNDING = (x + y == 1e16 + 4)
bits/build/python-host/Lib/test/test_math.py:    @unittest.skipIf(HAVE_DOUBLE_ROUNDING,
bits/build/python-host/build/lib.linux-x86_64-2.7/_sysconfigdata.py: 'X87_DOUBLE_ROUNDING': 0,
Binary file bits/build/python-host/build/lib.linux-x86_64-2.7/_sysconfigdata.pyc matches
bits/build/python-host/pyconfig.h.in:#undef X87_DOUBLE_ROUNDING
bits/build/python-host/configure:$as_echo "#define X87_DOUBLE_ROUNDING 1" >>confdefs.h
bits/build/python-host/Python/pymath.c:#ifdef X87_DOUBLE_ROUNDING
bits/build/python-host/configure.ac:  AC_DEFINE(X87_DOUBLE_ROUNDING, 1,
Binary file bits/build/grub-inst/lib/grub/i386-pc/pxe.mod matches
Binary file bits/build/grub-inst/lib/grub/i386-pc/pxe.module matches
Binary file bits/build/bits-2001/boot/grub/i386-pc/pxe.mod matches
Binary file bits/build/bits-2001/bits-2001.iso matches
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_START_UNDI			0x0000
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_STARTUP			0x0001
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_CLEANUP			0x0002
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_INITIALIZE		0x0003
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_RESET_NIC		0x0004
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_SHUTDOWN		0x0005
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_OPEN			0x0006
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_CLOSE			0x0007
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_TRANSMIT		0x0008
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_SET_MCAST_ADDR		0x0009
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_SET_STATION_ADDR	0x000A
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_SET_PACKET_FILTER	0x000B
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_INFORMATION		0x000C
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_STATISTICS		0x000D
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_CLEAR_STATISTICS	0x000E
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_INITIATE_DIAGS		0x000F
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_FORCE_INTERRUPT		0x0010
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_MCAST_ADDR		0x0011
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_NIC_TYPE		0x0012
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_IFACE_INFO		0x0013
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_ISR			0x0014
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define	GRUB_PXENV_STOP_UNDI			0x0015
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_STATE		0x0015
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_KEEP_UNDI				0x04
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_INVALID_FUNCTION			0x60
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_MEDIATEST_FAILED			0x61
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_INIT_NIC_FOR_MCAST	0x62
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_INITIALIZE_NIC		0x63
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_INITIALIZE_PHY		0x64
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_READ_CONFIG_DATA		0x65
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_READ_INIT_DATA		0x66
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_BAD_MAC_ADDRESS			0x67
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_BAD_EEPROM_CHECKSUM		0x68
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_ERROR_SETTING_ISR		0x69
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_INVALID_STATE			0x6A
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_TRANSMIT_ERROR			0x6B
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_INVALID_PARAMETER		0x6C
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_NO_UNDI_ROMID			0xC4
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_BAD_UNDI_ROMID			0xC5
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_BAD_UNDI_DRIVER_IMAGE		0xC6
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_UNDI_START			0xCA
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:  grub_uint16_t	undi_data_seg;	/* UNDI Data segment address.  */
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:  grub_uint16_t	undi_data_size;	/* UNDI Data segment size (bytes).  */
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:  grub_uint16_t	undi_code_seg;	/* UNDI Code segment address.  */
bits/build/grub-build-i386-efi/include/grub/cpu/pc/pxe.h:  grub_uint16_t	undi_code_size;	/* UNDI Code segment size (bytes).  */
bits/build/bits/python/pyconfig.h:#undef X87_DOUBLE_ROUNDING
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_START_UNDI			0x0000
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_STARTUP			0x0001
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_CLEANUP			0x0002
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_INITIALIZE		0x0003
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_RESET_NIC		0x0004
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_SHUTDOWN		0x0005
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_OPEN			0x0006
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_CLOSE			0x0007
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_TRANSMIT		0x0008
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_SET_MCAST_ADDR		0x0009
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_SET_STATION_ADDR	0x000A
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_SET_PACKET_FILTER	0x000B
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_GET_INFORMATION		0x000C
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_GET_STATISTICS		0x000D
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_CLEAR_STATISTICS	0x000E
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_INITIATE_DIAGS		0x000F
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_FORCE_INTERRUPT		0x0010
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_GET_MCAST_ADDR		0x0011
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_GET_NIC_TYPE		0x0012
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_GET_IFACE_INFO		0x0013
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_ISR			0x0014
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define	GRUB_PXENV_STOP_UNDI			0x0015
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_UNDI_GET_STATE		0x0015
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_KEEP_UNDI				0x04
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_UNDI_INVALID_FUNCTION			0x60
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_UNDI_MEDIATEST_FAILED			0x61
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_INIT_NIC_FOR_MCAST	0x62
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_INITIALIZE_NIC		0x63
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_INITIALIZE_PHY		0x64
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_READ_CONFIG_DATA		0x65
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_READ_INIT_DATA		0x66
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_UNDI_BAD_MAC_ADDRESS			0x67
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_UNDI_BAD_EEPROM_CHECKSUM		0x68
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_UNDI_ERROR_SETTING_ISR		0x69
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_UNDI_INVALID_STATE			0x6A
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_UNDI_TRANSMIT_ERROR			0x6B
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_UNDI_INVALID_PARAMETER		0x6C
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_LOADER_NO_UNDI_ROMID			0xC4
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_LOADER_BAD_UNDI_ROMID			0xC5
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_LOADER_BAD_UNDI_DRIVER_IMAGE		0xC6
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:#define GRUB_PXENV_STATUS_LOADER_UNDI_START			0xCA
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:  grub_uint16_t	undi_data_seg;	/* UNDI Data segment address.  */
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:  grub_uint16_t	undi_data_size;	/* UNDI Data segment size (bytes).  */
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:  grub_uint16_t	undi_code_seg;	/* UNDI Code segment address.  */
bits/build/grub-build-i386-pc/include/grub/machine/pxe.h:  grub_uint16_t	undi_code_size;	/* UNDI Code segment size (bytes).  */
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_START_UNDI			0x0000
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_STARTUP			0x0001
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_CLEANUP			0x0002
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_INITIALIZE		0x0003
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_RESET_NIC		0x0004
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_SHUTDOWN		0x0005
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_OPEN			0x0006
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_CLOSE			0x0007
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_TRANSMIT		0x0008
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_SET_MCAST_ADDR		0x0009
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_SET_STATION_ADDR	0x000A
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_SET_PACKET_FILTER	0x000B
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_INFORMATION		0x000C
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_STATISTICS		0x000D
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_CLEAR_STATISTICS	0x000E
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_INITIATE_DIAGS		0x000F
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_FORCE_INTERRUPT		0x0010
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_MCAST_ADDR		0x0011
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_NIC_TYPE		0x0012
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_IFACE_INFO		0x0013
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_ISR			0x0014
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define	GRUB_PXENV_STOP_UNDI			0x0015
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_STATE		0x0015
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_KEEP_UNDI				0x04
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_INVALID_FUNCTION			0x60
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_MEDIATEST_FAILED			0x61
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_INIT_NIC_FOR_MCAST	0x62
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_INITIALIZE_NIC		0x63
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_INITIALIZE_PHY		0x64
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_READ_CONFIG_DATA		0x65
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_READ_INIT_DATA		0x66
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_BAD_MAC_ADDRESS			0x67
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_BAD_EEPROM_CHECKSUM		0x68
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_ERROR_SETTING_ISR		0x69
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_INVALID_STATE			0x6A
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_TRANSMIT_ERROR			0x6B
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_INVALID_PARAMETER		0x6C
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_NO_UNDI_ROMID			0xC4
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_BAD_UNDI_ROMID			0xC5
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_BAD_UNDI_DRIVER_IMAGE		0xC6
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_UNDI_START			0xCA
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:  grub_uint16_t	undi_data_seg;	/* UNDI Data segment address.  */
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:  grub_uint16_t	undi_data_size;	/* UNDI Data segment size (bytes).  */
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:  grub_uint16_t	undi_code_seg;	/* UNDI Code segment address.  */
bits/build/grub-build-i386-pc/include/grub/cpu/pc/pxe.h:  grub_uint16_t	undi_code_size;	/* UNDI Code segment size (bytes).  */
Binary file bits/build/grub-build-i386-pc/grub-core/net/drivers/i386/pc/pxe_module-pxe.o matches
Binary file bits/build/grub-build-i386-pc/grub-core/pxe.mod matches
Binary file bits/build/grub-build-i386-pc/grub-core/pxe.module matches
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_START_UNDI			0x0000
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_STARTUP			0x0001
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_CLEANUP			0x0002
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_INITIALIZE		0x0003
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_RESET_NIC		0x0004
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_SHUTDOWN		0x0005
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_OPEN			0x0006
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_CLOSE			0x0007
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_TRANSMIT		0x0008
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_SET_MCAST_ADDR		0x0009
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_SET_STATION_ADDR	0x000A
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_SET_PACKET_FILTER	0x000B
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_INFORMATION		0x000C
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_STATISTICS		0x000D
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_CLEAR_STATISTICS	0x000E
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_INITIATE_DIAGS		0x000F
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_FORCE_INTERRUPT		0x0010
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_MCAST_ADDR		0x0011
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_NIC_TYPE		0x0012
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_IFACE_INFO		0x0013
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_ISR			0x0014
bits/build/grub/include/grub/i386/pc/pxe.h:#define	GRUB_PXENV_STOP_UNDI			0x0015
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_UNDI_GET_STATE		0x0015
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_KEEP_UNDI				0x04
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_INVALID_FUNCTION			0x60
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_MEDIATEST_FAILED			0x61
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_INIT_NIC_FOR_MCAST	0x62
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_INITIALIZE_NIC		0x63
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_INITIALIZE_PHY		0x64
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_READ_CONFIG_DATA		0x65
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_CANNOT_READ_INIT_DATA		0x66
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_BAD_MAC_ADDRESS			0x67
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_BAD_EEPROM_CHECKSUM		0x68
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_ERROR_SETTING_ISR		0x69
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_INVALID_STATE			0x6A
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_TRANSMIT_ERROR			0x6B
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_UNDI_INVALID_PARAMETER		0x6C
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_NO_UNDI_ROMID			0xC4
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_BAD_UNDI_ROMID			0xC5
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_BAD_UNDI_DRIVER_IMAGE		0xC6
bits/build/grub/include/grub/i386/pc/pxe.h:#define GRUB_PXENV_STATUS_LOADER_UNDI_START			0xCA
bits/build/grub/include/grub/i386/pc/pxe.h:  grub_uint16_t	undi_data_seg;	/* UNDI Data segment address.  */
bits/build/grub/include/grub/i386/pc/pxe.h:  grub_uint16_t	undi_data_size;	/* UNDI Data segment size (bytes).  */
bits/build/grub/include/grub/i386/pc/pxe.h:  grub_uint16_t	undi_code_seg;	/* UNDI Code segment address.  */
bits/build/grub/include/grub/i386/pc/pxe.h:  grub_uint16_t	undi_code_size;	/* UNDI Code segment size (bytes).  */
bits/build/grub/ChangeLog:	Terminate UNDI and PXE before launching the payload to avoid problems
bits/build/grub/grub-core/net/drivers/i386/pc/pxe.c:      grub_pxe_call (GRUB_PXENV_UNDI_ISR, isr, pxe_rm_entry);
bits/build/grub/grub-core/net/drivers/i386/pc/pxe.c:      grub_pxe_call (GRUB_PXENV_UNDI_ISR, isr, pxe_rm_entry);
bits/build/grub/grub-core/net/drivers/i386/pc/pxe.c:      grub_pxe_call (GRUB_PXENV_UNDI_ISR, isr, pxe_rm_entry);
bits/build/grub/grub-core/net/drivers/i386/pc/pxe.c:      grub_pxe_call (GRUB_PXENV_UNDI_ISR, isr, pxe_rm_entry);
bits/build/grub/grub-core/net/drivers/i386/pc/pxe.c:      grub_pxe_call (GRUB_PXENV_UNDI_ISR, isr, pxe_rm_entry);
bits/build/grub/grub-core/net/drivers/i386/pc/pxe.c:  grub_pxe_call (GRUB_PXENV_UNDI_TRANSMIT, trans, pxe_rm_entry);
bits/build/grub/grub-core/net/drivers/i386/pc/pxe.c:    grub_pxe_call (GRUB_PXENV_UNDI_CLOSE,
bits/build/grub/grub-core/net/drivers/i386/pc/pxe.c:  grub_pxe_call (GRUB_PXENV_UNDI_OPEN, ou, pxe_rm_entry);
bits/build/grub/grub-core/net/drivers/i386/pc/pxe.c:    return grub_error (GRUB_ERR_IO, "can't open UNDI");
bits/build/grub/grub-core/net/drivers/i386/pc/pxe.c:  grub_pxe_call (GRUB_PXENV_UNDI_CLOSE,
bits/build/grub/grub-core/net/drivers/i386/pc/pxe.c:  grub_pxe_call (GRUB_PXENV_UNDI_SHUTDOWN,
bits/build/grub/grub-core/net/drivers/i386/pc/pxe.c:  grub_pxe_call (GRUB_PXENV_UNDI_GET_INFORMATION, ui, pxe_rm_entry);
bits/build/grub/grub-core/contrib-deps/python/Include/pyport.h:#if defined(X87_DOUBLE_ROUNDING) && !defined(HAVE_PY_SET_53BIT_PRECISION)
bits/build/grub/grub-core/contrib-deps/python/Include/pymath.h:#  ifdef X87_DOUBLE_ROUNDING
bits/build/grub/grub-core/contrib-deps/python/Doc/whatsnew/2.7.rst:  on certain 32-bit Intel chips and defines a :c:macro:`X87_DOUBLE_ROUNDING`
bits/build/grub/grub-core/contrib-deps/python/Lib/test/test_math.py:HAVE_DOUBLE_ROUNDING = (x + y == 1e16 + 4)
bits/build/grub/grub-core/contrib-deps/python/Lib/test/test_math.py:    @unittest.skipIf(HAVE_DOUBLE_ROUNDING,
bits/build/grub/grub-core/contrib-deps/python/pyconfig.h.in:#undef X87_DOUBLE_ROUNDING
bits/build/grub/grub-core/contrib-deps/python/configure:$as_echo "#define X87_DOUBLE_ROUNDING 1" >>confdefs.h
bits/build/grub/grub-core/contrib-deps/python/Python/pymath.c:#ifdef X87_DOUBLE_ROUNDING
bits/build/grub/grub-core/contrib-deps/python/configure.ac:  AC_DEFINE(X87_DOUBLE_ROUNDING, 1,
bits/build/grub/grub-core/contrib/python/pyconfig.h:#undef X87_DOUBLE_ROUNDING
bits/build/grub/grub-core/gnulib/vasnprintf.c:                        DECL_LONG_DOUBLE_ROUNDING
bits/build/grub/grub-core/gnulib/vasnprintf.c:                        BEGIN_LONG_DOUBLE_ROUNDING ();
bits/build/grub/grub-core/gnulib/vasnprintf.c:                        END_LONG_DOUBLE_ROUNDING ();
bits/build/grub/grub-core/gnulib/vasnprintf.c:                        DECL_LONG_DOUBLE_ROUNDING
bits/build/grub/grub-core/gnulib/vasnprintf.c:                        BEGIN_LONG_DOUBLE_ROUNDING ();
bits/build/grub/grub-core/gnulib/vasnprintf.c:                                    END_LONG_DOUBLE_ROUNDING ();
bits/build/grub/grub-core/gnulib/vasnprintf.c:                                            END_LONG_DOUBLE_ROUNDING ();
bits/build/grub/grub-core/gnulib/vasnprintf.c:                                            END_LONG_DOUBLE_ROUNDING ();
bits/build/grub/grub-core/gnulib/vasnprintf.c:                                            END_LONG_DOUBLE_ROUNDING ();
bits/build/grub/grub-core/gnulib/vasnprintf.c:                                            END_LONG_DOUBLE_ROUNDING ();
bits/build/grub/grub-core/gnulib/vasnprintf.c:                        END_LONG_DOUBLE_ROUNDING ();
bits/build/grub/contrib/python/pyconfig.h:#undef X87_DOUBLE_ROUNDING
bits/rc/python/pyconfig.h:#undef X87_DOUBLE_ROUNDING
Binary file bits/bits-2001.iso matches
UDK-uefi-development-kit/edk2/ArmVirtPkg/ArmVirt.dsc.inc:  #  DEBUG_UNDI      0x00010000  // UNDI Driver
UDK-uefi-development-kit/edk2/MdeModulePkg/Include/Library/NetLib.h:  The underlying UNDI driver may or may not support reporting media status from
UDK-uefi-development-kit/edk2/MdeModulePkg/Include/Library/NetLib.h:  the correct media status for old UNDI driver, which doesn't support reporting 
UDK-uefi-development-kit/edk2/MdeModulePkg/Include/Library/NetLib.h:  1) For UNDI with this capability, when the cable is not attached, there will
UDK-uefi-development-kit/edk2/MdeModulePkg/Include/Library/NetLib.h:  2) for UNDI without this capability, in case that network cable is attached when
UDK-uefi-development-kit/edk2/MdeModulePkg/Include/Library/NetLib.h:  Find the UNDI/SNP handle from controller and protocol GUID.
UDK-uefi-development-kit/edk2/MdeModulePkg/Include/Library/NetLib.h:  service binding instance that is installed on the UNDI/SNP handle.
UDK-uefi-development-kit/edk2/MdeModulePkg/Include/Library/NetLib.h:  UNDI/SNP handle.
UDK-uefi-development-kit/edk2/MdeModulePkg/Include/Library/NetLib.h:  @return The UNDI/SNP handle or NULL for errors.
UDK-uefi-development-kit/edk2/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  The underlying UNDI driver may or may not support reporting media status from
UDK-uefi-development-kit/edk2/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  media status for old UNDI driver which doesn't support reporting media status
UDK-uefi-development-kit/edk2/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  1) for UNDI with this capability, in case of cable is not attached, there will
UDK-uefi-development-kit/edk2/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  2) for UNDI without this capability, in case that network cable is attached when
UDK-uefi-development-kit/edk2/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  // Till now, GetStatus() report no media; while, in case UNDI not support
UDK-uefi-development-kit/edk2/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  Find the UNDI/SNP handle from controller and protocol GUID.
UDK-uefi-development-kit/edk2/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  service binding instance that is install on UNDI/SNP handle.
UDK-uefi-development-kit/edk2/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  UNDI/SNP handle.
UDK-uefi-development-kit/edk2/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  @return The UNDI/SNP handle or NULL for errors.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.h:} PXEBC_DHCP4_OPTION_UNDI;
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.h:#define DEFAULT_CLASS_ID_DATA "PXEClient:Arch:xxxxx:UNDI:003000"
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.h:#define DEFAULT_UNDI_TYPE     1
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.h:#define DEFAULT_UNDI_MAJOR    3
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.h:#define DEFAULT_UNDI_MINOR    0
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.h:  PXEBC_DHCP4_OPTION_UNDI           *Undi;
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.c:  OptList[Index]->OpCode  = DHCP4_TAG_UNDI;
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.c:  OptList[Index]->Length  = (UINT8) sizeof (PXEBC_DHCP4_OPTION_UNDI);
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.c:  OptEnt.Undi             = (PXEBC_DHCP4_OPTION_UNDI *) OptList[Index]->Data;
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.c:    OptEnt.Undi->Type       = DEFAULT_UNDI_TYPE;
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.c:    OptEnt.Undi->MajorVer   = DEFAULT_UNDI_MAJOR;
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.c:    OptEnt.Undi->MinorVer   = DEFAULT_UNDI_MINOR;
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/MnpDxe/MnpImpl.h:#define MNP_TX_BUFFER_INCREASEMENT    32    // Same as the recycling Q length for xmit_done in UNDI command.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Reset.c:  Call UNDI to reset the NIC.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Reset.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Reset.c:    // UNDI could not be reset. Return UNDI error.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Nvdata.c:  @retval EFI_INVALID_PARAMETER Invalid UNDI command.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Nvdata.c:  @retval EFI_UNSUPPORTED       Command is not supported by UNDI.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Nvdata.c:  @retval EFI_DEVICE_ERROR      Fail to execute UNDI command.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Nvdata.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  Call UNDI to initialize the interface.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  @retval EFI_SUCCESS           UNDI is initialized successfully.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  @retval EFI_DEVICE_ERROR      UNDI could not be initialized.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  // let UNDI decide/detect these values
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  // PXE_STATFLAGS_COMMAND_COMPLETE or PXE_STATFLAGS_COMMAND_FAILED, the command has not been executed by the UNDI.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:    // active connection to this network device. If the no media StatFlag is set, the UNDI and network 
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  // Compute tx/rx buffer sizes based on UNDI init info and parameters.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  // If UNDI support cable detect for INITIALIZE command, try it first.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  // Try to update the MediaPresent field of EFI_SIMPLE_NETWORK_MODE if the UNDI support it.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Station_address.c:  Call UNDI to read the MAC address of the NIC and update the mode structure 
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Station_address.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Station_address.c:  Call UNDI to set a new MAC address for the NIC.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Station_address.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Station_address.c:    // UNDI command failed.  Return UNDI status to caller.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Mcast_ip_to_mac.c:  @retval EFI_INVALID_PARAMETER Invalid UNDI command. 
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Mcast_ip_to_mac.c:  @retval EFI_UNSUPPORTED       Command is not supported by UNDI. 
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Mcast_ip_to_mac.c:  @retval EFI_DEVICE_ERROR      Fail to execute UNDI command. 
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Mcast_ip_to_mac.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Mcast_ip_to_mac.c:    // UNDI command failed.  Return EFI_DEVICE_ERROR
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive.c:  Call UNDI to receive a packet and fills in the data in the input pointers.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive.c:  @retval EFI_DEVICE_ERROR      Fail to execute UNDI command.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive.c:  // network cable should be present. While, some UNDI driver may not report
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/WaitForPacket.c:  // Fill in CDB for UNDI GetStatus().
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/WaitForPacket.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Get_status.c:  field of EFI_SIMPLE_NETWORK_MODE if UNDI support it.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Get_status.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Get_status.c:      // UNDI has written some transmitted buffer addresses into the DB. Store them into Snp->RecycledTxBuf.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Get_status.c:  // Update MediaPresent field of EFI_SIMPLE_NETWORK_MODE if the UNDI support
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Shutdown.c:  Call UNDI to shut down the interface.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Shutdown.c:  @retval EFI_SUCCESS        UNDI is shut down successfully.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Shutdown.c:  @retval EFI_DEVICE_ERROR   UNDI could not be shut down.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Shutdown.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Shutdown.c:    // UNDI could not be shutdown. Return UNDI error.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  This is a callback routine supplied to UNDI3.1 at undi_start time.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  New callbacks for 3.1: there won't be a virtual2physical callback for UNDI 3.1
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  @param UniqueId  This was supplied to UNDI at Undi_Start, SNP uses this to
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  @param UniqueId      This was supplied to UNDI at Undi_Start, SNP uses this to
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  IO routine for UNDI3.1.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  @param UniqueId       This was supplied to UNDI at Undi_Start, SNP uses this
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  @param UniqueId      This was supplied to UNDI at Undi_Start, SNP uses this to
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  @param UniqueId    This was supplied to UNDI at Undi_Start, SNP uses this to
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  This is a callback routine supplied to UNDI at undi_start time. The virtual
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  @param UniqueId    This was supplied to UNDI at Undi_Start, SNP uses this to
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Stop.c:  Call UNDI to stop the interface and changes the snp state.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Stop.c:  // Issue UNDI command
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Start.c:  Call UNDI to start the interface and changes the snp state.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Start.c:  @retval EFI_SUCCESS            UNDI is started successfully.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Start.c:  @retval EFI_DEVICE_ERROR       UNDI could not be started.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Start.c:  // Initialize UNDI Start CDB for H/W UNDI
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Start.c:  // Make changes to H/W UNDI Start CDB if this is
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Start.c:  // a S/W UNDI.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Start.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Start.c:    // UNDI could not be started. Return UNDI error.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Statistics.c:  // Initialize UNDI Statistics CDB
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Statistics.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Statistics.c:  // Convert the UNDI statistics information to SNP statistics
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Transmit.c:  Call UNDI to create the meadia header for the given data buffer.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Transmit.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Transmit.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  @retval EFI_INVALID_PARAMETER Invalid UNDI command.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  @retval EFI_UNSUPPORTED       Command is not supported by UNDI.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  @retval EFI_DEVICE_ERROR      Fail to execute UNDI command.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:    // UNDI command failed.  Return UNDI status to caller.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  @retval EFI_DEVICE_ERROR      Fail to execute UNDI command.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:    // UNDI command failed.  Return UNDI status to caller.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  @retval EFI_DEVICE_ERROR      Fail to execute UNDI command. 
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:    // UNDI command failed.  Return UNDI status to caller.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  // Convert UNDI32 StatFlags to EFI SNP filter flags.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  // check if we are asked to enable or disable something that the UNDI
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:(EFIAPI *ISSUE_UNDI32_COMMAND) (
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  //  Pointer to S/W UNDI API entry point
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  //  This will be NULL for H/W UNDI
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  ISSUE_UNDI32_COMMAND  IssueUndi32Command;
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  //  Allocated tx/rx buffer that was passed to UNDI Initialize.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  // UNDI structure, we need to remember the init info for a long time!
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  // Whether UNDI support reporting media status from GET_STATUS command,
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  // Whether UNDI support cable detect for INITIALIZE command,
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  // Array of the recycled transmit buffer address from UNDI.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @retval EFI_DEVICE_ERROR       UNDI could not be started
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @retval EFI_SUCCESS            UNDI is started successfully
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @retval EFI_SUCCESS           UNDI is initialized successfully
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @retval EFI_DEVICE_ERROR      UNDI could not be initialized
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @retval EFI_SUCCESS        UNDI is shut down successfully
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @retval EFI_DEVICE_ERROR   UNDI could not be shut down
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  field of EFI_SIMPLE_NETWORK_MODE if UNDI support it.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  This is a callback routine supplied to UNDI3.1 at undi_start time.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  UNDI call this routine when it wants to have exclusive access to a critical
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  there won't be a virtual2physical callback for UNDI 3.1 because undi3.1 uses
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @param UniqueId  This was supplied to UNDI at Undi_Start, SNP uses this to
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  UNDI call this routine with the number of micro seconds when it wants to
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @param UniqueId      This was supplied to UNDI at Undi_Start, SNP uses this to
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  This is the IO routine for UNDI3.1 to start CPB.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @param UniqueId       This was supplied to UNDI at Undi_Start, SNP uses this
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  UNDI call this routine when it has to map a CPU address to a device
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @param UniqueId      - This was supplied to UNDI at Undi_Start, SNP uses this to store
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  UNDI call this routine when it wants to unmap an address that was previously
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @param UniqueId    This was supplied to UNDI at Undi_Start, SNP uses this to store.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  UNDI call this routine when it wants synchronize the virtual buffer contents
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @param UniqueId    This was supplied to UNDI at Undi_Start, SNP uses this to store
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  One notified function to stop UNDI device when gBS->ExitBootServices() called.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // Shutdown and stop UNDI driver
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  Send command to UNDI. It does nothing currently.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  @param Cdb   command to be sent to UNDI.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  PXE_UNDI                                  *Pxe;
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  DEBUG ((EFI_D_INFO, "Support(): UNDI3.1 found on handle %p\n", Controller));
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  Pxe = (PXE_UNDI *) (UINTN) (NiiProtocol->Id);
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // Do S/W UNDI specific checks.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  if ((Pxe->hw.Implementation & PXE_ROMID_IMP_HW_UNDI) == 0) {
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  PXE_UNDI                                  *Pxe;
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  DEBUG ((EFI_D_INFO, "Start(): UNDI3.1 found\n"));
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  Pxe = (PXE_UNDI *) (UINTN) (Nii->Id);
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:    DEBUG ((EFI_D_NET, "\nUNDI does not have promiscuous or broadcast support."));
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // OK, we like this UNDI, and we know snp is not already there on this handle
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  if ((Pxe->hw.Implementation & PXE_ROMID_IMP_HW_UNDI) != 0) {
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:      Snp->IssueUndi32Command = (ISSUE_UNDI32_COMMAND) (UINTN) Pxe->sw.EntryPoint;
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:      Snp->IssueUndi32Command = (ISSUE_UNDI32_COMMAND) (UINTN) ((UINT8) (UINTN) Pxe + Pxe->sw.EntryPoint);
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // Allocate a global CPB and DB buffer for this UNDI interface.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // -UNDI 3.0 wants all the addresses passed to it (even the cpb and db) to be
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // -This is not a requirement for 3.1 or later UNDIs but the code looks
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // -it is OK to allocate one global set of CPB, DB pair for each UNDI
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // initialize the UNDI first for this.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // We should not leave UNDI started and initialized here. this DriverStart()
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // routine must only find and attach the SNP interface to UNDI layer that it
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // The UNDI layer will be started when upper layers call Snp->start.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // initialized UNDI here, now we are done, do a shutdown and stop of the
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // UNDI interface!
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  @retval EFI_SUCEESS      Initialization routine has found UNDI hardware,
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/Ip4Dxe/Ip4If.c:                                is installed. Most like the UNDI handle.
UDK-uefi-development-kit/edk2/MdeModulePkg/Universal/Network/Ip4Dxe/Ip4If.h:                                is installed. Most like the UNDI handle.
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.c:  OptList[Index]->OpCode  = DHCP4_TAG_UNDI;
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.c:  OptList[Index]->Length  = (UINT8) sizeof (PXEBC_DHCP4_OPTION_UNDI);
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.c:  OptEnt.Undi             = (PXEBC_DHCP4_OPTION_UNDI *) OptList[Index]->Data;
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.c:    OptEnt.Undi->Type     = DEFAULT_UNDI_TYPE;
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.c:    OptEnt.Undi->MajorVer = DEFAULT_UNDI_MAJOR;
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.c:    OptEnt.Undi->MinorVer = DEFAULT_UNDI_MINOR;
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.h:#define DEFAULT_CLASS_ID_DATA "PXEClient:Arch:xxxxx:UNDI:003000"
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.h:#define DEFAULT_UNDI_TYPE     1
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.h:#define DEFAULT_UNDI_MAJOR    3
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.h:#define DEFAULT_UNDI_MINOR    0
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.h:} PXEBC_DHCP4_OPTION_UNDI;
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.h:  PXEBC_DHCP4_OPTION_UNDI           *Undi;
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp6.c:  OptList[Index]->OpCode     = HTONS (DHCP6_OPT_UNDI);
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp6.c:  OptEnt.Undi                = (PXEBC_DHCP6_OPTION_UNDI *) OptList[Index]->Data;
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp6.c:    OptEnt.Undi->Type        = DEFAULT_UNDI_TYPE;
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp6.c:    OptEnt.Undi->MajorVer    = DEFAULT_UNDI_MAJOR;
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp6.c:    OptEnt.Undi->MinorVer    = DEFAULT_UNDI_MINOR;
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:  Check whether UNDI protocol supports IPv6.
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:  @param[out]  Ipv6Support       TRUE if UNDI supports IPv6.
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:  @retval EFI_SUCCESS            Get the result whether UNDI supports IPv6 by NII or AIP protocol successfully.
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:  @retval EFI_NOT_FOUND          Don't know whether UNDI supports IPv6 since NII or AIP is not available.
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:  // Check whether the UNDI supports IPv6 by NII protocol.
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:  // Check whether the UNDI supports IPv6 by AIP protocol.
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:  *Ipv6Support = ((EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT *) InfoBlock)->Ipv6Support;
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:    // Fail to get the data whether UNDI supports IPv6. Set default value.
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp6.h:} PXEBC_DHCP6_OPTION_UNDI;
UDK-uefi-development-kit/edk2/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp6.h:  PXEBC_DHCP6_OPTION_UNDI           *Undi;
UDK-uefi-development-kit/edk2/NetworkPkg/Dhcp6Dxe/Dhcp6Io.c:  is detected. Note that the underlying UNDI driver may not support reporting
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp6.c:  OptList[Index]->OpCode     = HTONS (DHCP6_OPT_UNDI);
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp6.c:  OptEnt.Undi                = (HTTP_BOOT_DHCP6_OPTION_UNDI *) OptList[Index]->Data;
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp6.c:    OptEnt.Undi->Type        = DEFAULT_UNDI_TYPE;
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp6.c:    OptEnt.Undi->MajorVer    = DEFAULT_UNDI_MAJOR;
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp6.c:    OptEnt.Undi->MinorVer    = DEFAULT_UNDI_MINOR;
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp4.h:} HTTP_BOOT_DHCP4_OPTION_UNDI;
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp4.h:  HTTP_BOOT_DHCP4_OPTION_UNDI           *Undi;
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp4.h:#define DEFAULT_CLASS_ID_DATA "HTTPClient:Arch:xxxxx:UNDI:003000"
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp4.h:#define DEFAULT_UNDI_TYPE     1
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp4.h:#define DEFAULT_UNDI_MAJOR    3
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp4.h:#define DEFAULT_UNDI_MINOR    0
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp6.h:} HTTP_BOOT_DHCP6_OPTION_UNDI;
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp6.h:  HTTP_BOOT_DHCP6_OPTION_UNDI           *Undi;
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp4.c:  OptList[Index]->OpCode  = DHCP4_TAG_UNDI;
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp4.c:  OptList[Index]->Length  = (UINT8) sizeof (HTTP_BOOT_DHCP4_OPTION_UNDI);
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp4.c:  OptEnt.Undi             = (HTTP_BOOT_DHCP4_OPTION_UNDI *) OptList[Index]->Data;
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp4.c:    OptEnt.Undi->Type     = DEFAULT_UNDI_TYPE;
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp4.c:    OptEnt.Undi->MajorVer = DEFAULT_UNDI_MAJOR;
UDK-uefi-development-kit/edk2/NetworkPkg/HttpBootDxe/HttpBootDhcp4.c:    OptEnt.Undi->MinorVer = DEFAULT_UNDI_MINOR;
Binary file UDK-uefi-development-kit/edk2/Conf/.cache/build.db matches
UDK-uefi-development-kit/edk2/Omap35xxPkg/Omap35xxPkg.dsc:#  DEBUG_UNDI      0x00010000  // UNDI Driver
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  Initialization functions for EFI UNDI32 driver.
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:PXE_SW_UNDI             *pxe_31 = NULL;  // 3.1 entry
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:UNDI32_DEV              *UNDI32DeviceList[MAX_NIC_INTERFACES];
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:UNDI_CONFIG_TABLE       *UndiDataPointer = NULL;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:// UNDI Class Driver Global Variables
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:    // UNDI32DeviceList is an array of pointers
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:      UNDI32DeviceList[Index]->NIIProtocol_31.Id = (UINT64) (UINTN) Pxe31Pointer;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:        (VOID **) &(UNDI32DeviceList[Index])
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  configuration table for UNDI to work at runtime!
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32_DEV                *UNDI32Device;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                  sizeof (UNDI32_DEV),
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                  (VOID **) &UNDI32Device
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  ZeroMem ((CHAR8 *) UNDI32Device, sizeof (UNDI32_DEV));
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                    &UNDI32Device->NicInfo.OriginalPciAttributes
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                    (sizeof (PXE_SW_UNDI) + sizeof (PXE_SW_UNDI) + 32),
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:      sizeof (PXE_SW_UNDI) + sizeof (PXE_SW_UNDI) + 32
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:      pxe_31 = (PXE_SW_UNDI *) ((UINTN) (TmpPxePointer + 8));
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:      pxe_31 = (PXE_SW_UNDI *) TmpPxePointer;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.Id = (UINT64) (UINTN) (pxe_31);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                            &UNDI32Device->NicInfo.Config
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  CfgHdr = (PCI_CONFIG_HEADER *) &(UNDI32Device->NicInfo.Config[0]);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.IfNum  = pxe_31->IFcnt | pxe_31->IFcntExt << 8;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  PxeUpdate (&UNDI32Device->NicInfo, pxe_31);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NicInfo.Io_Function                    = PciIoFncs;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32DeviceList[UNDI32Device->NIIProtocol_31.IfNum] = UNDI32Device;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->Undi32BaseDevPath                      = UndiDevicePath;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:            &UNDI32Device->Undi32DevPath,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:            UNDI32Device->Undi32BaseDevPath,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:            &UNDI32Device->NicInfo
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->Signature                     = UNDI_DEV_SIGNATURE;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.Revision       = EFI_NETWORK_INTERFACE_IDENTIFIER_PROTOCOL_REVISION_31;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.Type           = EfiNetworkInterfaceUndi;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.MajorVer       = PXE_ROMID_MAJORVER;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.MinorVer       = PXE_ROMID_MINORVER_31;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.ImageSize      = 0;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.ImageAddr      = 0;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.Ipv6Supported  = TRUE;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.StringId[0]    = 'U';
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.StringId[1]    = 'N';
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.StringId[2]    = 'D';
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.StringId[3]    = 'I';
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->DeviceHandle                  = NULL;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->Aip.GetInformation            = UndiAipGetInfo;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->Aip.SetInformation            = UndiAipSetInfo;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->Aip.GetSupportedTypes         = UndiAipGetSupportedTypes;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                  &UNDI32Device->DeviceHandle,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                  &UNDI32Device->NIIProtocol_31,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                  UNDI32Device->Undi32DevPath,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                  &UNDI32Device->Aip,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                  UNDI32Device->DeviceHandle,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                  &UNDI32Device->DeviceHandle,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                  &UNDI32Device->NIIProtocol_31,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                  UNDI32Device->Undi32DevPath,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                  &UNDI32Device->Aip,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32DeviceList[UNDI32Device->NIIProtocol_31.IfNum] = NULL;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  gBS->FreePool (UNDI32Device->Undi32DevPath);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                    UNDI32Device->NicInfo.OriginalPciAttributes,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  gBS->FreePool (UNDI32Device);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32_DEV                                *UNDI32Device;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:      UNDI32Device = UNDI_DEV_FROM_THIS (NIIProtocol);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                        UNDI32Device->Undi32DevPath,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                        &UNDI32Device->NIIProtocol_31,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:          Status = UNDI32Device->NicInfo.Io_Function->Attributes (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                                                        UNDI32Device->NicInfo.Io_Function,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                                                        UNDI32Device->NicInfo.OriginalPciAttributes,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:          gBS->FreePool (UNDI32Device->Undi32DevPath);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:          gBS->FreePool (UNDI32Device);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  @param  BaseDevPtr           Pointer to the device path which the UNDI device
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  // set the environment ready (similar to UNDI_Start call) so that we can
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  // execute the other UNDI_ calls to get the mac address
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI_CONFIG_TABLE       *TmpData;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI_CONFIG_TABLE       *UndiData;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:  UndiData = (UNDI_CONFIG_TABLE *)UndiDataPointer;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:    UndiData->NII_entry[Index].NII_InterfacePointer = &UNDI32DeviceList[Index]->NIIProtocol_31;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:    UndiData->NII_entry[Index].DevicePathPointer    = UNDI32DeviceList[Index]->Undi32DevPath;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:    TmpData = (UNDI_CONFIG_TABLE *) CfgPtr->VendorTable;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Init.c:    UndiData = (UNDI_CONFIG_TABLE *) CfgPtr->VendorTable;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_CALL_TABLE api_table[PXE_OPCODE_LAST_VALID+1] = { \
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,PXE_DBSIZE_NOT_USED,0, (UINT16)(ANY_STATE),UNDI_GetState },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {(UINT16)(DONT_CHECK),PXE_DBSIZE_NOT_USED,0,(UINT16)(ANY_STATE),UNDI_Start },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,PXE_DBSIZE_NOT_USED,0,MUST_BE_STARTED,UNDI_Stop },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,sizeof(PXE_DB_GET_INIT_INFO),0,MUST_BE_STARTED, UNDI_GetInitInfo },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,sizeof(PXE_DB_GET_CONFIG_INFO),0,MUST_BE_STARTED, UNDI_GetConfigInfo },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {sizeof(PXE_CPB_INITIALIZE),(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK),MUST_BE_STARTED,UNDI_Initialize },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,PXE_DBSIZE_NOT_USED,(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED,UNDI_Reset },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,PXE_DBSIZE_NOT_USED,0, MUST_BE_INITIALIZED,UNDI_Shutdown },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,PXE_DBSIZE_NOT_USED,(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED,UNDI_Interrupt },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED, UNDI_RecFilter },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED, UNDI_StnAddr },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED, (UINT16)(DONT_CHECK), (UINT16)(DONT_CHECK), MUST_BE_INITIALIZED, UNDI_Statistics },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {sizeof(PXE_CPB_MCAST_IP_TO_MAC),sizeof(PXE_DB_MCAST_IP_TO_MAC), (UINT16)(DONT_CHECK),MUST_BE_INITIALIZED, UNDI_ip2mac },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED, UNDI_NVData },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED, UNDI_Status },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {(UINT16)(DONT_CHECK),PXE_DBSIZE_NOT_USED,(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED, UNDI_FillHeader },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {(UINT16)(DONT_CHECK),PXE_DBSIZE_NOT_USED,(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED, UNDI_Transmit },\
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {sizeof(PXE_CPB_RECEIVE),sizeof(PXE_DB_RECEIVE),0,MUST_BE_INITIALIZED, UNDI_Receive } \
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  This routine determines the operational state of the UNDI.  It updates the state flags in the
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  to the caller of the UNDI API.
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_GetState (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  This routine is used to change the operational state of the UNDI from stopped to started.
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  UNDI as having already been started.
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  Since this UNDI supports both old and new undi specifications,
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  to provide it's I/O abstraction to the UNDI.
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Start (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:    // everything worked fine! In EFI 1.1, UNDI is not using the full
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:    // UNDI only uses the offset values. Since UNDI3.0 cannot provide any
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  This routine is used to change the operational state of the UNDI from started to stopped.
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  UNDI as having already not been shut down.
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Stop (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  applications to initialize the UNDI.  This will fill in data in the Data Block structure that is
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_GetInitInfo (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_GetConfigInfo (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  This routine resets the network adapter and initializes the UNDI using the parameters supplied in
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  Once the memory requirements of the UNDI are obtained by using the GetInitInfo command, a block
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  UNDI during the Initialize in the CPB.  This memory is used primarily for transmit and receive buffers.
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  the UNDI is now initialized.
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Initialize (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  This routine resets the network adapter and initializes the UNDI using the parameters supplied in
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Reset (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  interrupt enables are disabled.  Once the UNDI has been shutdown, it can then be stopped
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Shutdown (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  can still be polled by using the UNDI_GetState command.
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Interrupt (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_RecFilter (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_StnAddr (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Statistics (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_ip2mac (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  This is an optional function according to the UNDI specification  (or will be......)
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_NVData (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Status (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_FillHeader (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  are disabled, the transmit interrupt status is still set and can be checked using the UNDI_Status
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  All UNDIs support fragmented frames, now all network devices or protocols do.  If a fragmented
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  frame CPB is given to UNDI and the network device does not support fragmented frames
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  (see !PXE.Implementation flag), the UNDI will have to copy the fragments into a local buffer
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Transmit (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Receive (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  This is the main SW UNDI API entry using the newer nii protocol.
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_APIEntry_new (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  AdapterInfo               = &(UNDI32DeviceList[CdbPtr->IFnum]->NicInfo);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  UNDI_APIEntry_Common (cdb);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_APIEntry_Common (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  UNDI_CALL_TABLE   *tab_ptr;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  AdapterInfo = &(UNDI32DeviceList[CdbPtr->IFnum]->NicInfo);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  // check if UNDI_State is valid for this call
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  this UNDI is supporting and removes the NIC_DATA_POINTER from the array.
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  Otherwise, it increments the number of NICs this UNDI is supported and
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  IN PXE_SW_UNDI        *PxePtr
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  @param  PxePtr               Pointer to SW_UNDI data structure.
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  IN PXE_SW_UNDI *PxePtr
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  PxePtr->Len       = (UINT8) sizeof (PXE_SW_UNDI);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Decode.c:  PxePtr->EntryPoint  = (UINT64) (UINTN) UNDI_APIEntry_new;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/UndiAipImpl.c:  EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT_GUID
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/UndiAipImpl.c:  UNDI32_DEV                            *UNDI32Device;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/UndiAipImpl.c:  EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT    *UndiIpv6Support;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/UndiAipImpl.c:  UNDI32Device = UNDI_DEV_FROM_AIP (This);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/UndiAipImpl.c:  *InformationBlockSize = sizeof (EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/UndiAipImpl.c:  UndiIpv6Support = (EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT *) (*InformationBlock);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/UndiAipImpl.c:  UndiIpv6Support->Ipv6Support = UNDI32Device->NIIProtocol_31.Ipv6Supported;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.h:  UINT8 VersionFlag;  // UNDI30 or UNDI31??
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/ComponentName.c:    UEFI Component Name(2) protocol implementation for EFI UNDI32 driver.
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/ComponentName.c:    L"UNDI32 Driver"
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/ComponentName.c:    L"UNDI32 Controller"
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:  EFI internal structures for the EFI UNDI driver.
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:#ifndef _UNDI_32_H_
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:#define _UNDI_32_H_
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:// UNDI_CALL_TABLE.state can have the following values
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:#define UNDI_DEV_SIGNATURE   SIGNATURE_32('u','n','d','i')
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:#define UNDI_DEV_FROM_THIS(a) CR(a, UNDI32_DEV, NIIProtocol_31, UNDI_DEV_SIGNATURE)
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:#define UNDI_DEV_FROM_NIC(a) CR(a, UNDI32_DEV, NicInfo, UNDI_DEV_SIGNATURE)
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:#define UNDI_DEV_FROM_AIP(a) CR(a, UNDI32_DEV, Aip, UNDI_DEV_SIGNATURE)
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:} UNDI32_DEV;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:} UNDI_CALL_TABLE;
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:extern UNDI_CALL_TABLE  api_table[];
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:extern PXE_SW_UNDI      *pxe_31;  // !pxe structure for 3.1 drivers
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:extern UNDI32_DEV       *UNDI32DeviceList[MAX_NIC_INTERFACES];
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:InitializeUNDIDriver (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_notify_virtual (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_GetState (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Start (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Stop (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_GetInitInfo (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_GetConfigInfo (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Initialize (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Reset (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Shutdown (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Interrupt (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_RecFilter (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_StnAddr (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Statistics (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_ip2mac (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_NVData (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Status (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_FillHeader (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Transmit (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Receive (
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:VOID UNDI_APIEntry_new(UINT64);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:VOID UNDI_APIEntry_Common(UINT64);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:VOID PxeStructInit (PXE_SW_UNDI *PxePtr);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/Undi32.h:VOID PxeUpdate (NIC_DATA_INSTANCE *NicPtr, PXE_SW_UNDI *PxePtr);
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:  Since UNDI3.0 uses the TmpMemIo function (instead of the callback routine)
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:  which also takes the UniqueId parameter (as in UNDI3.1 spec) we don't have
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:  Since UNDI3.0 uses the TmpMemIo function (instead of the callback routine)
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:  which also takes the UniqueId parameter (as in UNDI3.1 spec) we don't have
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:  Since UNDI3.0 uses the TmpMemIo function (instead of the callback routine)
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:  which also takes the UniqueId parameter (as in UNDI3.1 spec) we don't have
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:  Since UNDI3.0 uses the TmpMemIo function (instead of the callback routine)
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:  which also takes the UniqueId parameter (as in UNDI3.1 spec) we don't have
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:  Since UNDI3.0 uses the TmpMemIo function (instead of the callback routine)
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:  which also takes the UniqueId parameter (as in UNDI3.1 spec) we don't have
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:  Since UNDI3.0 uses the TmpMemIo function (instead of the callback routine)
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:  which also takes the UniqueId parameter (as in UNDI3.1 spec) we don't have
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:      // this UNDI cannot handle addresses beyond 4 GB without a map routine
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/edk2/OptionRomPkg/UndiRuntimeDxe/E100b.c:  // Convert NIC statistics counter format to EFI/UNDI
UDK-uefi-development-kit/edk2/OptionRomPkg/Bus/Usb/UsbNetworking/Ax88772b/SimpleNetwork.c:  // check if we are asked to enable or disable something that the UNDI
UDK-uefi-development-kit/edk2/StdLib/LibC/Softfloat/timesoftfloat.c:    NUM_ROUNDINGMODES
UDK-uefi-development-kit/edk2/StdLib/LibC/Softfloat/timesoftfloat.c:    TININESS_BEFORE_ROUNDING = 1,
UDK-uefi-development-kit/edk2/StdLib/LibC/Softfloat/timesoftfloat.c:    TININESS_AFTER_ROUNDING,
UDK-uefi-development-kit/edk2/StdLib/LibC/Softfloat/timesoftfloat.c:     case TININESS_BEFORE_ROUNDING:
UDK-uefi-development-kit/edk2/StdLib/LibC/Softfloat/timesoftfloat.c:     case TININESS_AFTER_ROUNDING:
UDK-uefi-development-kit/edk2/StdLib/LibC/Softfloat/timesoftfloat.c:              roundingMode < NUM_ROUNDINGMODES;
UDK-uefi-development-kit/edk2/StdLib/LibC/Softfloat/timesoftfloat.c:            tininessMode = TININESS_BEFORE_ROUNDING;
UDK-uefi-development-kit/edk2/StdLib/LibC/Softfloat/timesoftfloat.c:            tininessMode = TININESS_AFTER_ROUNDING;
UDK-uefi-development-kit/edk2/ShellPkg/Library/UefiHandleParsingLib/UefiHandleParsingLib.c:          TempStr = HiiGetString (mHandleParsingHiiHandle, STRING_TOKEN(STR_UNDI_IPV6_INFO), NULL);
UDK-uefi-development-kit/edk2/ShellPkg/Library/UefiHandleParsingLib/UefiHandleParsingLib.c:                         ((EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT *)InformationBlock)->Ipv6Support
UDK-uefi-development-kit/edk2/ShellPkg/Library/UefiHandleParsingLib/UefiHandleParsingLib.uni:#string STR_UNDI_IPV6_INFO                #language en-US "    UNDI IPv6 Supported: %%H%d%%N \r\n"
UDK-uefi-development-kit/edk2/MdePkg/Include/IndustryStandard/Dhcp.h:#define DHCP4_TAG_UNDI               94   /// Client Network Interface Identifier, RFC 4578
UDK-uefi-development-kit/edk2/MdePkg/Include/IndustryStandard/Dhcp.h:#define DHCP6_OPT_UNDI              62   /// Assigned by IANA, RFC 5970
UDK-uefi-development-kit/edk2/MdePkg/Include/Library/DebugLib.h:#define DEBUG_UNDI      0x00010000  // UNDI Driver
UDK-uefi-development-kit/edk2/MdePkg/Include/Library/DebugLib.h:#define EFI_D_UNDI      DEBUG_UNDI
UDK-uefi-development-kit/edk2/MdePkg/Include/Protocol/WiFi2.h:  // the connection establishment procedure is terminated by the UNDI driver.
UDK-uefi-development-kit/edk2/MdePkg/Include/Protocol/NetworkInterfaceIdentifier.h:                        ///< option 60 in DHCP. For a Type of EfiNetworkInterfaceUndi, this field is UNDI.
UDK-uefi-development-kit/edk2/MdePkg/Include/Protocol/NetworkInterfaceIdentifier.h:typedef struct undiconfig_table  UNDI_CONFIG_TABLE;
UDK-uefi-development-kit/edk2/MdePkg/Include/Protocol/NetworkInterfaceIdentifier.h:/// The format of the configuration table for UNDI
UDK-uefi-development-kit/edk2/MdePkg/Include/Protocol/NetworkInterfaceIdentifier.h:                                            ///< that this UNDI controls.
UDK-uefi-development-kit/edk2/MdePkg/Include/Protocol/NetworkInterfaceIdentifier.h:  UNDI_CONFIG_TABLE  *nextlink;             ///< A pointer to the next UNDI
UDK-uefi-development-kit/edk2/MdePkg/Include/Protocol/Supplicant.h:  // Supported hardware encryption types provided by wireless UNDI driver. The
UDK-uefi-development-kit/edk2/MdePkg/Include/Protocol/PxeBaseCode.h:#define EFI_PXE_BASE_CODE_BOOT_TYPE_DOSUNDI           3
UDK-uefi-development-kit/edk2/MdePkg/Include/Protocol/AdapterInformation.h:#define EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT_GUID \
UDK-uefi-development-kit/edk2/MdePkg/Include/Protocol/AdapterInformation.h:/// EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT
UDK-uefi-development-kit/edk2/MdePkg/Include/Protocol/AdapterInformation.h:  /// Returns capability of UNDI to support IPv6 traffic.
UDK-uefi-development-kit/edk2/MdePkg/Include/Protocol/AdapterInformation.h:} EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT;
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI ROM ID and devive ID signature.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// Return UNDI operational state.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// Change UNDI operational state from Stopped to Started.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// Change UNDI operational state from Started to Stopped.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// Get UNDI initialization information.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// Changed UNDI operational state from Started to Initialized.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// Change the UNDI operational state from Initialized to Started.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// Last valid PXE UNDI OpCode number.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:// UNDI Get State
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:// UNDI Start
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:// UNDI Stop
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:// UNDI Get Init Info
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:// UNDI Get Config Info
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Initialize
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Reset
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Shutdown.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Interrupt Enables.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Receive Filters.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Station Address.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Statistics.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI MCast IP to MAC.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI NvData.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Get Status.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// NICs and UNDIs may transmit multiple buffers per interrupt.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Fill Header.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Transmit.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// S/W UNDI only.  Return after the packet has been transmitted.  A
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:#define PXE_OPFLAGS_SWUNDI_TRANSMIT_OPMASK  0x0001
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Receive.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// implemented by all UNDIs.  COMMAND_QUEUED is only needed by UNDIs
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Get State.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Start.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Get Init Info.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Initialize.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Reset.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Shutdown.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Interrupt Enables.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Receive Filters.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Station Address.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Statistics.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h://// UNDI MCast IP to MAC.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI NvData.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Get Status.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Fill Header.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Transmit.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Receive
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// Common StatCodes returned by all UNDI commands, UNDI protocol functions
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:#define PXE_STATCODE_INVALID_UNDI         0x000F
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// This interface number must be passed to the S/W UNDI Start command.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// This interface number is returned by the S/W UNDI Get State and
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// Setting this flag directs the UNDI to queue this command for later
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// execution if the UNDI is busy and it supports command queuing.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// These two bit values are used to determine if there are more UNDI
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  PXE_UINT8   Len;            ///< sizeof(PXE_HW_UNDI).
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:} PXE_HW_UNDI;
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI operation state.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// If set, CDB identified in CDBaddr port is given to UNDI.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  PXE_UINT8   Len;            ///< sizeof(PXE_SW_UNDI).
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:} PXE_SW_UNDI;
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  PXE_HW_UNDI hw;
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  PXE_SW_UNDI sw;
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:} PXE_UNDI;
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI command interface revision.  These are the values that get sent
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:#define PXE_ROMID_IMP_HW_UNDI                             0x80000000
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:    /// See S/W UNDI ROMID structure definition for PCI and
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will never request a delay smaller than 10 microseconds
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// microseconds before returning control to the UNDI.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI may need to block multi-threaded/multi-processor access to
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// device.  To this end, a blocking service is needed by the UNDI.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// When UNDI needs a block, it will call Block() passing a non-zero
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// value.  When UNDI no longer needs a block, it will call Block()
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// do not return control to the UNDI until the previous Block() is
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will pass the virtual address of a buffer and the virtual
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will read or write the device io space using this call back
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will never request a delay smaller than 10 microseconds
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// microseconds before returning control to the UNDI.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI may need to block multi-threaded/multi-processor access to
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// device.  To this end, a blocking service is needed by the UNDI.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// When UNDI needs a block, it will call Block() passing a non-zero
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// value.  When UNDI no longer needs a block, it will call Block()
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// do not return control to the UNDI until the previous Block() is
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will pass the virtual address of a buffer and the virtual
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will read or write the device io space using this call back
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will pass the virtual address of a buffer, direction of the data
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will pass the virtual and mapped addresses of a buffer.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will pass the virtual and mapped addresses of a buffer.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// protocol driver can provide anything for this Unique_ID, UNDI remembers
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// the Initialize command. Giving UNDI more memory will generally
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// If MemoryRequired is zero, the UNDI does not need and will not
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// this UNDI.  This information is needed when allocating receive
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// be allocated by the UNDI.  If MemoryRequired is non-zero, this
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// This identifies the PCI network device that this UNDI interface.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// This identifies the PCC network device that this UNDI interface
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// be in contiguous physical memory and cannot be swapped out.  The UNDI
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// default link speed (operation depends on UNDI/NIC functionality).
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// If these fields are set to zero, the UNDI will allocate buffer
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// the UNDI and network device do not use external memory buffers.
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// Memory used by the UNDI and network device is allocated from the
UDK-uefi-development-kit/edk2/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI/NIC.
UDK-uefi-development-kit/edk2/MdePkg/MdePkg.uni:                                                                                   "BIT16 - UNDI Driver message.<BR>\n"
UDK-uefi-development-kit/edk2/MdePkg/MdePkg.uni:                                                                                   "BIT16 - UNDI Driver message.<BR>\n"
UDK-uefi-development-kit/edk2/MdePkg/MdePkg.dec:  #  BIT16 - UNDI Driver message.<BR>
UDK-uefi-development-kit/edk2/MdePkg/MdePkg.dec:  #  BIT16 - UNDI Driver message.<BR>
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_GET_INFORMATION_T              GetInformation;         ///< Data from GET INFORMATION
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_GET_NIC_TYPE_T                 GetNicType;             ///< Data from GET NIC TYPE
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_GET_NDIS_INFO_T                GetNdisInfo;            ///< Data from GET NDIS INFO
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_ISR_T                          Isr;                    ///< Data from ISR
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_TBD_T                          *Xmit;                  //
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Call 16 bit UNDI ROM to stop the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  START UNDI
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_START_UNDI (0000h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_START_UNDI_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Description: This service is used to pass the BIOS parameter registers to the UNDI driver. The UNDI driver is
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Note: This API service must be called only once during UNDI Option ROM boot.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  The UNDI driver is responsible for saving this information and using it every time
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_STARTUP is called.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_START_UNDI_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_START_UNDI_T               *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI STARTUP    
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_STARTUP (0001h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_STARTUP_T parameter structure that has been initialized by the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Description: This API is responsible for initializing the contents of the UNDI code & data segment for proper
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  operation. Information from the !PXE structure and the first PXENV_START_UNDI API call is used
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  to complete this initialization. The rest of the UNDI APIs will not be available until this call has
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Note: PXENV_UNDI_STARTUP must not be called again without first calling
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_SHUTDOWN.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_STARTUP and PXENV_UNDI_SHUTDOWN are no longer responsible for
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  chaining interrupt 1Ah. This must be done by the PXENV_START_UNDI and
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_STOP_UNDI API calls.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_STARTUP_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_STARTUP_T             *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI CLEANUP
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_CLEANUP (0002h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_CLEANUP_T parameter structure.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_CLEANUP_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_CLEANUP_T             *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI INITIALIZE
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_INITIALIZE (0003h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_INITIALIZE_T parameter structure that has been initialized by the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  are those supplied to the most recent UNDI_STARTUP call. This routine does not enable the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  application must call PXENV_UNDI_OPEN to logically connect the network adapter to the network.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_INITIALIZE_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_INITIALIZE_T          *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI RESET ADAPTER
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_RESET_ADAPTER (0004h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_RESET_ADAPTER_t parameter structure that has been initialized
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:    PXENV_UNDI_MCAST_ADDRESS_t    R_Mcast_Buf;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_RESET_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_MCAST_ADDRESS_t;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_RESET_T               *PxeUndiTable,
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI SHUTDOWN
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_SHUTDOWN (0005h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_SHUTDOWN_T parameter.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Note: The contents of the PXENV_UNDI_STARTUP parameter structure need to be saved by the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Universal NIC Driver in case PXENV_UNDI_INITIALIZE is called again.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_SHUTDOWN_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_SHUTDOWN_T            *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI OPEN
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_OPEN (0006h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_OPEN_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:    PXENV_UNDI_MCAST_ADDRESS_t R_Mcast_Buf;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_OPEN_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  R_Mcast_Buf: See definition in UNDI RESET ADAPTER (0004h).
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_OPEN_T                *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI CLOSE
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_CLOSE (0007h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_CLOSE_T parameter.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_CLOSE_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_CLOSE_T               *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI TRANSMIT PACKET
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_TRANSMIT (0008h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_TRANSMIT_T parameter structure that
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  code of PXE_UNDI_STATUS__OUT OF_RESOURCE. The number of buffers is
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  transmission of one or more packets. A call to PXENV_UNDI_TRANSMIT is
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } t_PXENV_UNDI_TRANSMIT;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_TBD_T
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Protocol: This is the protocol of the upper layer that is calling UNDI
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_TRANSMIT_T            *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI SET MULTICAST ADDRESS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_SET_MCAST_ADDRESS (0009h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:    PXENV_UNDI_MCAST_ADDRESS_t R_Mcast_Buf;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_SET_MCAST_ADDR_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  R_Mcast_Buf: See description in the UNDI RESET ADAPTER
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_SET_MCAST_ADDR_T      *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI SET STATION ADDRESS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_SET_STATION_ADDRESS (000Ah)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_SET_STATION_ADDRESS_t parameter structure that has been
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_SET_STATION_ADDR_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_SET_STATION_ADDR_T    *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI SET PACKET FILTER
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_SET_PACKET_FILTER (000Bh)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_SET_PACKET_FILTER_T parameter structure that has been
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_SET_PACKET_FILTER_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Filter: See the receive filter values in the UNDI OPEN
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_SET_PACKET_FILTER_T   *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI GET INFORMATION
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_GET_INFORMATION (000Ch)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_GET_INFORMATION_T parameter structure that has been
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Note: The PermNodeAddress field must be valid after PXENV_START_UNDI and
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_STARTUP have been issued. All other fields must be valid after
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_START_UNDI, PXENV_UNDI_STARTUP and PXENV_UNDI_INITIALIZE have been
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_GET_INFORMATION_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_GET_INFORMATION_T     *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI GET STATISTICS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_GET_STATISTICS (000Dh)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_GET_STATISTICS_T parameter structure that has been initialized
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_GET_STATISTICS_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_GET_STATISTICS_T      *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI CLEAR STATISTICS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_CLEAR_STATISTICS (000Eh)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_CLEAR_STATISTICS_T parameter.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_CLEAR_STATISTICS_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_CLEAR_STATISTICS_T    *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI INITIATE DIAGS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_INITIATE_DIAGS (000Fh)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_INITIATE_DIAGS_T parameter.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_INITIATE_DIAGS_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_INITIATE_DIAGS_T      *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI FORCE INTERRUPT
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_FORCE_INTERRUPT (0010h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_FORCE_INTERRUPT_T parameter structure that has been
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  copy the packet, it can call the PXENV_UNDI_FORCE_INTERRUPT routine to simulate the receive
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_FORCE_INTERRUPT_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_FORCE_INTERRUPT_T     *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI GET MULTICAST ADDRESS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_GET_MCAST_ADDRESS (0011h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_GET_MCAST_ADDR_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_GET_MCAST_ADDR_T      *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI GET NIC TYPE
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_GET_NIC_TYPE (0012h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_GET_NIC_TYPE_T parameter structure that has been initialized by
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  the UNDI is supported before making this call. If the UNDI is not supported, the NIC-specific
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_START_UNDI, PXENV_UNDI_STARTUP and PXENV_UNDI_INITIALIZE must be called
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_GET_NIC_TYPE_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_GET_NIC_TYPE_T        *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI GET IFACE INFO
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_GET_IFACE_INFO (0013h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_GET_IFACE_INFO_t parameter structure that has been initialized
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Note: UNDI follows the NDIS2 specification in giving this information. It is the responsibility of the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_START_UNDI, PXENV_UNDI_STARTUP and PXENV_UNDI_INITIALIZE must be called
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_GET_NDIS_INFO_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_GET_NDIS_INFO_T       *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI ISR
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_ISR (0014h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_ISR_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  In this design the UNDI does not hook the interrupt for the Network Interface. Instead, the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  application or the protocol driver hooks the interrupt and calls UNDI with the PXENV_UNDI_ISR
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  API call for interrupt verification (PXENV_UNDI_ISR_IN_START) and processing
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  (PXENV_UNDI_ISR_IN_PROCESS and PXENV_UNDI_ISR_GET_NEXT).
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  calls the UNDI using the PXENV_UNDI_ISR API with the value PXENV_UNDI_ISR_IN_START for
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  the FuncFlag parameter. At this time UNDI must disable the interrupts at the Network Interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  level and read any status values required to further process the interrupt. UNDI must return as
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  quickly as possible with one of the two values, PXENV_UNDI_ISR_OUT_OURS or
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_ISR_OUT_NOT_OURS, for the parameter FuncFlag depending on whether the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  If the value returned in FuncFlag is PXENV_UNDI_ISR_OUT_NOT_OURS, then the interrupt was
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  If the value returned in FuncFlag is PXENV_UNDI_ISR_OUT_OURS, the protocol driver must start
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  The protocol driver strategy routine will call UNDI using this same API with FuncFlag equal to
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_ISR_IN_PROCESS. At this time UNDI must find the cause of this interrupt and
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  The protocol driver calls UNDI repeatedly with the FuncFlag equal to
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_ISR_IN_GET_NEXT to get all the buffers in a frame and also all the received
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  frames in the queue. On this call, UNDI must remember the previous buffer given to the protoco,l
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  If there is no received frame pending to be processed, UNDI processes the transmit completes and
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  if there is no other interrupt status to be processed, UNDI re-enables the interrupt at the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  NETWORK INTERFACE level and returns PXENV_UNDI_ISR_OUT_DONE in the FuncFlag.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  strategy routine when the UNDI re-enables interrupts.   
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_ISR_T                 *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  STOP UNDI
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_STOP_UNDI (0015h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_STOP_UNDI_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Note: This API service must be called only once at the end of UNDI Option ROM boot. One of the valid
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  status codes is PXENV_STATUS_KEEP. If this status is returned, UNDI must not be removed from
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  base memory. Also, UNDI must not be removed from base memory if BC is not removed from base
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_STOP_UNDI_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_STOP_UNDI_T                *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI GET STATE
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_GET_STATE (0015h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_GET_STATE_T parameter.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  constants. The UNDI_STATE field in the parameter structure must be set to one of the valid state
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Description: This call can be used to obtain state of the UNDI engine in order to avoid issuing adverse call
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:    #define PXE_UNDI_GET_STATE_STARTED 1
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:    #define PXE_UNDI_GET_STATE_INITIALIZED 2
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:    #define PXE_UNDI_GET_STATE_OPENED 3
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:    UINT8 UNDIstate;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_GET_STATE_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Note. UNDI implementation is responsible for maintaining
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI ISR
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_ISR (0014h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a t_PXENV_UNDI_ISR parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_GET_STATE_T           *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  UINT16  PxeRomIdOffset;     ///< offset of UNDI, $BC$, or BUSD ROM ID structure
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  UNDI_LOADER_T *DisplayPointer;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DisplayPointer = (UNDI_LOADER_T *) UndiLoaderStructure;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DEBUG ((DEBUG_NET, "\tUNDI_DS= 0x%X\n\r", DisplayPointer->Undi_Ds));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DEBUG ((DEBUG_NET, "\tUNDI_CS= 0x%X\n\r", DisplayPointer->Undi_Cs));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  the "Early UNDI" trick.  Herein, the UNDI layer can be loaded in the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  UNDI_ROMID_T  *DisplayPointer;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DisplayPointer = (UNDI_ROMID_T *) RomIDStructure;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    DisplayPointer->UNDI_Rev[0],
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    DisplayPointer->UNDI_Rev[1],
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    DisplayPointer->UNDI_Rev[2])
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "Offset of UNDI loader routine in the option ROM image= 0x%X\n\r",
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    DisplayPointer->UNDI_Loader)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DEBUG ((DEBUG_NET, "From the data above, the absolute entry point of the UNDI loader is\n\r"));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT32) (DisplayPointer->UNDI_Loader + ((UINT32) (UINTN)(DisplayPointer - 0x20) & 0xFFFF0)))
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "needed to load and run the UNDI= 0x%X \n\r",
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "UNDI runtime code and data = 0x%X\n\r",
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "Far pointer to UNDI ROMID = 0x%X\n\r",
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "The UNDIData is \n\r\tSegment Addr = 0x%X\n\r\tPhysical Addr = 0x%X\n\r\tSeg Size = 0x%X\n\r",
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT16) DisplayPointer->UNDIData.Seg_Addr,
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT32) DisplayPointer->UNDIData.Phy_Addr,
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT16) DisplayPointer->UNDIData.Seg_Size)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "The UNDICodeWrite is \n\r\tSegment Addr = 0x%X\n\r\tPhysical Addr = 0x%X\n\r\tSeg Size = 0x%X\n\r",
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT16) DisplayPointer->UNDICode.Seg_Addr,
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT32) DisplayPointer->UNDICode.Phy_Addr,
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT16) DisplayPointer->UNDICode.Seg_Size)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT16) DisplayPointer->UNDICodeWrite.Seg_Addr,
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT32) DisplayPointer->UNDICodeWrite.Phy_Addr,
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT16) DisplayPointer->UNDICodeWrite.Seg_Size)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "UNDI code segment size in bytes = 0x%X\n\r",
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    DisplayPointer->UNDICodeSize)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  UNDI_ROMID_T          *RomIdTableAddress;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  UNDI_LOADER_T         *UndiLoaderTable;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DEBUG ((DEBUG_NET, "\n\r\n\rCheck for the UNDI ROMID Signature\n\r"));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  RomIdTableAddress = (UNDI_ROMID_T *) (RomAddress + OPTION_ROM_PTR->PxeRomIdOffset);
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // see if this is a header for an UNDI ROM ID structure (vs. a $BC$ or BUSD type)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  if (CompareMem (RomIdTableAddress->Signature, UNDI_ROMID_SIG, sizeof RomIdTableAddress->Signature) != 0) {
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "With an UNDI Loader located at 0x%X\n\r",
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    RomAddress + RomIdTableAddress->UNDI_Loader)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // found an UNDI ROM ID structure
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  SimpleNetworkDevice->Nii.MajorVer   = RomIdTableAddress->UNDI_Rev[2];
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  SimpleNetworkDevice->Nii.MinorVer   = RomIdTableAddress->UNDI_Rev[1];
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DEBUG ((DEBUG_NET, "Allocate area for the UNDI_LOADER_T structure\n\r"));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  SimpleNetworkDevice->UndiLoaderTablePages = EFI_SIZE_TO_PAGES (PARAGRAPH_SIZE + sizeof (UNDI_LOADER_T));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // Allocate memory for the Deployed UNDI.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // The UNDI is essentially telling us how much space it needs, and
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // Allocate memory for the Deployed UNDI stack
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // The UNDI is essentially telling us how much space it needs, and
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // Allocate memory for the Deployed UNDI.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // The UNDI is essentially telling us how much space it needs, and
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // these are in the Input and Output Parameter to be sent to the UNDI Loader code
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // UndiLoaderTable->_AX is AX value when UNDI ROM is initialized by BIOS, it is the PCI bus device
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "The Linear Address of the UNDI Loader entry is 0x%X\n",
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    RomAddress + RomIdTableAddress->UNDI_Loader)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "The Address offset of the UNDI Loader entry is 0x%X\n",
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    RomIdTableAddress->UNDI_Loader)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // make the call into the UNDI Code
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DEBUG ((DEBUG_INIT, "Make the call into the UNDI code now\n\r"));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    Segment * 0x10 + RomIdTableAddress->UNDI_Loader,
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    RomIdTableAddress->UNDI_Loader)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:                                                   (UINT16) RomIdTableAddress->UNDI_Loader,  // Offset
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DEBUG ((DEBUG_NET, "Now returned from the UNDI code\n\r"));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // The PXE UNDI can only grab this table when it's below one-MB, and
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // For PXE UNDI call, AX contains the return status.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // Convert the PXE UNDI Status to EFI_STATUS type
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Start the UNDI interface.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval EFI_DEVICE_ERROR Fail to start 16 bit UNDI ROM. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval Others           Status of start 16 bit UNDI ROM. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Start the UNDI interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval EFI_DEVICE_ERROR Fail to start 16 bit UNDI ROM. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval Others           Status of start 16 bit UNDI ROM. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Stop the UNDI interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval EFI_DEVICE_ERROR Fail to stop 16 bit UNDI ROM. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval Others           Status of stop 16 bit UNDI ROM. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Clean up any Real-mode UNDI residue from the system 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Unload 16 bit UNDI Option ROM from memory
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  CopyMem (&SimpleNetworkDevice->Nii.StringId, "UNDI", 4);
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Load 16 bit UNDI Option ROM into Memory
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    DEBUG ((DEBUG_NET, "ERROR : Could not load UNDI.  Status = %r\n", Status));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call PXENV_START_UNDI - Initilizes the UNID interface for use.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:             sizeof (PXENV_UNDI_TBD_T) / EFI_PAGE_SIZE + 1,
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  DEBUG ((DEBUG_INIT, "UNDI16 Driver : EFI_SUCCESS\n"));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:               sizeof (PXENV_UNDI_TBD_T) / EFI_PAGE_SIZE + 1
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:                 sizeof (PXENV_UNDI_TBD_T) / EFI_PAGE_SIZE + 1
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  IN OUT PXENV_UNDI_MCAST_ADDR_T  *McastBuffer,
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:// Load 16 bit UNDI Option ROM into memory
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Unload 16 bit UNDI Option ROM from memory
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Start the UNDI interface.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval EFI_DEVICE_ERROR Fail to start 16 bit UNDI ROM. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval Others           Status of start 16 bit UNDI ROM. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_START_UNDI_T  Start;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Stop the UNDI interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval EFI_DEVICE_ERROR Fail to stop 16 bit UNDI ROM. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval Others           Status of stop 16 bit UNDI ROM. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_STOP_UNDI_T Stop;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval EFI_DEVICE_ERROR Fail to cleanup 16 bit UNDI ROM. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval Others           Status of cleanup 16 bit UNDI ROM. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_CLEANUP_T  Cleanup;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to cleanup the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  ZeroMem (&SimpleNetworkDevice->GetInformation, sizeof (PXENV_UNDI_GET_INFORMATION_T));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  ZeroMem (&SimpleNetworkDevice->GetNicType, sizeof (PXENV_UNDI_GET_NIC_TYPE_T));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  ZeroMem (&SimpleNetworkDevice->GetNdisInfo, sizeof (PXENV_UNDI_GET_NDIS_INFO_T));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    ZeroMem (&SimpleNetworkDevice->Isr, sizeof (PXENV_UNDI_ISR_T));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    SimpleNetworkDevice->Isr.FuncFlag = PXENV_UNDI_ISR_IN_START;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // There have been no events on this UNDI interface, so return EFI_NOT_READY
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    if (SimpleNetworkDevice->Isr.FuncFlag == PXENV_UNDI_ISR_OUT_NOT_OURS) {
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    ZeroMem (&SimpleNetworkDevice->Isr, sizeof (PXENV_UNDI_ISR_T));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    SimpleNetworkDevice->Isr.FuncFlag = PXENV_UNDI_ISR_IN_PROCESS;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call UNDI GET_NEXT until DONE
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  while (SimpleNetworkDevice->Isr.FuncFlag != PXENV_UNDI_ISR_OUT_DONE) {
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // UNDI is busy.  Caller will have to call again.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    if (SimpleNetworkDevice->Isr.FuncFlag == PXENV_UNDI_ISR_OUT_BUSY) {
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Check for invalud UNDI FuncFlag
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    if (SimpleNetworkDevice->Isr.FuncFlag != PXENV_UNDI_ISR_OUT_RECEIVE &&
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:        SimpleNetworkDevice->Isr.FuncFlag != PXENV_UNDI_ISR_OUT_TRANSMIT
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    if (SimpleNetworkDevice->Isr.FuncFlag == PXENV_UNDI_ISR_OUT_TRANSMIT) {
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    else if (SimpleNetworkDevice->Isr.FuncFlag == PXENV_UNDI_ISR_OUT_RECEIVE) {
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    ZeroMem (&SimpleNetworkDevice->Isr, sizeof (PXENV_UNDI_ISR_T));
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    SimpleNetworkDevice->Isr.FuncFlag = PXENV_UNDI_ISR_IN_GET_NEXT;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:// Simple Network Protocol Interface Functions using 16 bit UNDI Option ROMs
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_STARTUP_T    Startup;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // The UNDI interface has been started, so update the State.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Call 16 bit UNDI ROM to stop the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_INITIALIZE_T Initialize;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_OPEN_T       Open;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    if (Initialize.Status == PXENV_STATUS_UNDI_MEDIATEST_FAILED) {
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // The UNDI interface has been initialized, so update the State.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_RESET_T      Reset;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_CLOSE_T      Close;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_SHUTDOWN_T   Shutdown;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // The UNDI interface has been initialized, so update the State.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // a shutdown will cause some versions of UNDI-16 to stop operating.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_CLOSE_T      Close;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_OPEN_T       Open;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to close the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Copy the MAC addresses into the UNDI open parameter structure
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_SET_STATION_ADDR_T SetStationAddr;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_CLOSE_T            Close;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_OPEN_T             Open;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to stop the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16-bit UNDI ROM to set the station address
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16-bit UNDI ROM to start the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_CLEAR_STATISTICS_T ClearStatistics;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_GET_STATISTICS_T   GetStatistics;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_GET_MCAST_ADDR_T GetMcastAddr;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // 16 bit UNDI Option ROMS do not support IPv6.  Check for IPv6 usage.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_TRANSMIT_T   XmitInfo;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Initialize UNDI WRITE parameter structure.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Make API call to UNDI TRANSMIT
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Clean up any Real-mode UNDI residue from the system 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  //        would be to perform an UNDI STOP command.  This strategam has been attempted
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/ComponentName.c:    L"BIOS[UNDI] Simple Network Protocol Driver"
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  START UNDI
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_START_UNDI (0000h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_START_UNDI_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Description: This service is used to pass the BIOS parameter registers to the UNDI driver. The UNDI driver is
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Note: This API service must be called only once during UNDI Option ROM boot.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  The UNDI driver is responsible for saving this information and using it every time
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_STARTUP is called.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_START_UNDI_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_START_UNDI_T      *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_START_UNDI_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_START_UNDI
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI STARTUP    
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_STARTUP (0001h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_STARTUP_T parameter structure that has been initialized by the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Description: This API is responsible for initializing the contents of the UNDI code & data segment for proper
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  operation. Information from the !PXE structure and the first PXENV_START_UNDI API call is used
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  to complete this initialization. The rest of the UNDI APIs will not be available until this call has
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Note: PXENV_UNDI_STARTUP must not be called again without first calling
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_SHUTDOWN.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_STARTUP and PXENV_UNDI_SHUTDOWN are no longer responsible for
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  chaining interrupt 1Ah. This must be done by the PXENV_START_UNDI and
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_STOP_UNDI API calls.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_STARTUP_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_STARTUP_T    *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_STARTUP_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_STARTUP
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI CLEANUP
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_CLEANUP (0002h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_CLEANUP_T parameter structure.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_CLEANUP_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_CLEANUP_T    *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_CLEANUP_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_CLEANUP
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI INITIALIZE
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_INITIALIZE (0003h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_INITIALIZE_T parameter structure that has been initialized by the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  are those supplied to the most recent UNDI_STARTUP call. This routine does not enable the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  application must call PXENV_UNDI_OPEN to logically connect the network adapter to the network.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_INITIALIZE_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_INITIALIZE_T  *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_INITIALIZE_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_INITIALIZE
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI RESET ADAPTER
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_RESET_ADAPTER (0004h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_RESET_ADAPTER_t parameter structure that has been initialized
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    PXENV_UNDI_MCAST_ADDRESS_t    R_Mcast_Buf;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_RESET_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_MCAST_ADDRESS_t;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_RESET_T      *PxeUndiTable,
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_OPEN_T   Open;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_CLOSE_T  Close;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            sizeof (PXENV_UNDI_RESET_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            PXENV_UNDI_RESET_NIC
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            PXENV_UNDI_CLOSE
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            sizeof (PXENV_UNDI_RESET_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            PXENV_UNDI_RESET_NIC
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    sizeof (PXENV_UNDI_MCAST_ADDR_T)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            PXENV_UNDI_OPEN
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI SHUTDOWN
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_SHUTDOWN (0005h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_SHUTDOWN_T parameter.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Note: The contents of the PXENV_UNDI_STARTUP parameter structure need to be saved by the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Universal NIC Driver in case PXENV_UNDI_INITIALIZE is called again.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_SHUTDOWN_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_SHUTDOWN_T   *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_SHUTDOWN_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_SHUTDOWN
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI OPEN
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_OPEN (0006h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_OPEN_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    PXENV_UNDI_MCAST_ADDRESS_t R_Mcast_Buf;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_OPEN_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  R_Mcast_Buf: See definition in UNDI RESET ADAPTER (0004h).
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_OPEN_T       *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_OPEN_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_OPEN
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI CLOSE
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_CLOSE (0007h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_CLOSE_T parameter.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_CLOSE_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_CLOSE_T      *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_CLOSE_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_CLOSE
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI TRANSMIT PACKET
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_TRANSMIT (0008h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_TRANSMIT_T parameter structure that
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  code of PXE_UNDI_STATUS__OUT OF_RESOURCE. The number of buffers is
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  transmission of one or more packets. A call to PXENV_UNDI_TRANSMIT is
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } t_PXENV_UNDI_TRANSMIT;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_TBD_T
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Protocol: This is the protocol of the upper layer that is calling UNDI
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_TRANSMIT_T   *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            sizeof (PXENV_UNDI_TRANSMIT_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            PXENV_UNDI_TRANSMIT
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI SET MULTICAST ADDRESS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_SET_MCAST_ADDRESS (0009h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    PXENV_UNDI_MCAST_ADDRESS_t R_Mcast_Buf;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_SET_MCAST_ADDR_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  R_Mcast_Buf: See description in the UNDI RESET ADAPTER
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_SET_MCAST_ADDR_T  *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_SET_MCAST_ADDR_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_SET_MCAST_ADDR
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI SET STATION ADDRESS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_SET_STATION_ADDRESS (000Ah)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_SET_STATION_ADDRESS_t parameter structure that has been
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_SET_STATION_ADDR_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_SET_STATION_ADDR_T  *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_SET_STATION_ADDR_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_SET_STATION_ADDR
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI SET PACKET FILTER
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_SET_PACKET_FILTER (000Bh)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_SET_PACKET_FILTER_T parameter structure that has been
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_SET_PACKET_FILTER_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Filter: See the receive filter values in the UNDI OPEN
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_SET_PACKET_FILTER_T  *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_SET_PACKET_FILTER_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_SET_PACKET_FILTER
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI GET INFORMATION
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_GET_INFORMATION (000Ch)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_GET_INFORMATION_T parameter structure that has been
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Note: The PermNodeAddress field must be valid after PXENV_START_UNDI and
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_STARTUP have been issued. All other fields must be valid after
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_START_UNDI, PXENV_UNDI_STARTUP and PXENV_UNDI_INITIALIZE have been
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_GET_INFORMATION_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_GET_INFORMATION_T  *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_GET_INFORMATION_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_GET_INFORMATION
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI GET STATISTICS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_GET_STATISTICS (000Dh)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_GET_STATISTICS_T parameter structure that has been initialized
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_GET_STATISTICS_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_GET_STATISTICS_T  *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_GET_STATISTICS_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_GET_STATISTICS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI CLEAR STATISTICS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_CLEAR_STATISTICS (000Eh)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_CLEAR_STATISTICS_T parameter.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_CLEAR_STATISTICS_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_CLEAR_STATISTICS_T  *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_CLEAR_STATISTICS_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_CLEAR_STATISTICS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI INITIATE DIAGS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_INITIATE_DIAGS (000Fh)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_INITIATE_DIAGS_T parameter.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_INITIATE_DIAGS_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_INITIATE_DIAGS_T  *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_INITIATE_DIAGS_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_INITIATE_DIAGS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI FORCE INTERRUPT
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_FORCE_INTERRUPT (0010h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_FORCE_INTERRUPT_T parameter structure that has been
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  copy the packet, it can call the PXENV_UNDI_FORCE_INTERRUPT routine to simulate the receive
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_FORCE_INTERRUPT_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_FORCE_INTERRUPT_T  *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_FORCE_INTERRUPT_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_FORCE_INTERRUPT
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI GET MULTICAST ADDRESS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_GET_MCAST_ADDRESS (0011h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_GET_MCAST_ADDR_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_GET_MCAST_ADDR_T  *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_GET_MCAST_ADDR_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_GET_MCAST_ADDR
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI GET NIC TYPE
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_GET_NIC_TYPE (0012h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_GET_NIC_TYPE parameter structure that has been initialized by
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  the UNDI is supported before making this call. If the UNDI is not supported, the NIC-specific
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_START_UNDI, PXENV_UNDI_STARTUP and PXENV_UNDI_INITIALIZE must be called
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_GET_NIC_TYPE_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_GET_NIC_TYPE_T  *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_GET_NIC_TYPE_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_GET_NIC_TYPE
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI GET IFACE INFO
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_GET_IFACE_INFO (0013h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_GET_IFACE_INFO_t parameter structure that has been initialized
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Note: UNDI follows the NDIS2 specification in giving this information. It is the responsibility of the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_START_UNDI, PXENV_UNDI_STARTUP and PXENV_UNDI_INITIALIZE must be called
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_GET_NDIS_INFO_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_GET_NDIS_INFO_T  *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_GET_NDIS_INFO_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_GET_NDIS_INFO
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI ISR
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_ISR (0014h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_ISR_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  In this design the UNDI does not hook the interrupt for the Network Interface. Instead, the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  application or the protocol driver hooks the interrupt and calls UNDI with the PXENV_UNDI_ISR
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  API call for interrupt verification (PXENV_UNDI_ISR_IN_START) and processing
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  (PXENV_UNDI_ISR_IN_PROCESS and PXENV_UNDI_ISR_GET_NEXT).
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  calls the UNDI using the PXENV_UNDI_ISR API with the value PXENV_UNDI_ISR_IN_START for
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  the FuncFlag parameter. At this time UNDI must disable the interrupts at the Network Interface
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  level and read any status values required to further process the interrupt. UNDI must return as
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  quickly as possible with one of the two values, PXENV_UNDI_ISR_OUT_OURS or
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_ISR_OUT_NOT_OURS, for the parameter FuncFlag depending on whether the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  If the value returned in FuncFlag is PXENV_UNDI_ISR_OUT_NOT_OURS, then the interrupt was
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  If the value returned in FuncFlag is PXENV_UNDI_ISR_OUT_OURS, the protocol driver must start
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  The protocol driver strategy routine will call UNDI using this same API with FuncFlag equal to
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_ISR_IN_PROCESS. At this time UNDI must find the cause of this interrupt and
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  The protocol driver calls UNDI repeatedly with the FuncFlag equal to
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_ISR_IN_GET_NEXT to get all the buffers in a frame and also all the received
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  frames in the queue. On this call, UNDI must remember the previous buffer given to the protoco,l
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  If there is no received frame pending to be processed, UNDI processes the transmit completes and
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  if there is no other interrupt status to be processed, UNDI re-enables the interrupt at the
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  NETWORK INTERFACE level and returns PXENV_UNDI_ISR_OUT_DONE in the FuncFlag.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  strategy routine when the UNDI re-enables interrupts.   
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_ISR_T        *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_ISR_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_ISR
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  STOP UNDI
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_STOP_UNDI (0015h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_STOP_UNDI_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Note: This API service must be called only once at the end of UNDI Option ROM boot. One of the valid
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  status codes is PXENV_STATUS_KEEP. If this status is returned, UNDI must not be removed from
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  base memory. Also, UNDI must not be removed from base memory if BC is not removed from base
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_STOP_UNDI_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_STOP_UNDI_T       *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_STOP_UNDI_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_STOP_UNDI
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI GET STATE
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_GET_STATE (0015h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_GET_STATE_T parameter.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  constants. The UNDI_STATE field in the parameter structure must be set to one of the valid state
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Description: This call can be used to obtain state of the UNDI engine in order to avoid issuing adverse call
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    #define PXE_UNDI_GET_STATE_STARTED 1
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    #define PXE_UNDI_GET_STATE_INITIALIZED 2
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    #define PXE_UNDI_GET_STATE_OPENED 3
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    UINT8 UNDIstate;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_GET_STATE_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Note. UNDI implementation is responsible for maintaining
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI ISR
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_ISR (0014h)
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a t_PXENV_UNDI_ISR parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_GET_STATE_T  *PxeUndiTable
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_GET_STATE_T),
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_GET_STATE
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define UNDI_ROMID_SIG      "UNDI"
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define UNDI_ROMID_REV      0x00
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define UNDI_ROMID_SIG_PTR  SIGNATURE_32 ('U', 'N', 'D', 'I')
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_KEEP_UNDI        0x04
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:// These errors are for UNDI compatible NIC drivers. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_INVALID_FUNCTION          0x60
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_MEDIATEST_FAILED          0x61
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_CANNOT_INIT_NIC_FOR_MCAST 0x62
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_CANNOT_INITIALIZE_NIC     0x63
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_CANNOT_INITIALIZE_PHY     0x64
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_CANNOT_READ_CONFIG_DATA   0x65
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_CANNOT_READ_INIT_DATA     0x66
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_BAD_MAC_ADDR              0x67
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_BAD_EEPROM_CKSUM          0x68
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_ERROR_SETTING_ISR         0x69
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_INVALID_STATE             0x6A
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_TRANSMIT_ERROR            0x6B
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_INVALID_PARAMETER         0x6C
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT8   UNDI_Rev[3];  ///< API revision number stored in Intel order.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16  UNDI_Loader;  ///< Offset of UNDI loader routine in the option ROM image.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16  StackSize;    ///< Minimum stack segment size, in bytes, needed to load and run the UNDI.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16  DataSize;     ///< UNDI runtime code and data
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} UNDI_ROMID_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  ///   UNDI_ROMID_T __FAR *UNDI;// Far pointer to UNDI ROMID
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  NEWSEGDESC_T  UNDIData;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  NEWSEGDESC_T  UNDICode;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  NEWSEGDESC_T  UNDICodeWrite;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16      UNDIDataSeg;  ///< Real mode UNDI data segment.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16      UNDIDataSize; ///< UNDI data segment size in bytes.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16      UNDICodeSeg;  ///< Real mode UNDI code segment.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16      UNDICodeSize; ///< UNDI code segment size in bytes.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} UNDI_LOADER_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h://  Put in some UNDI-specific arguments
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_START_UNDI              0x0000
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_STARTUP            0x0001
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_CLEANUP            0x0002
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_INITIALIZE         0x0003
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_RESET_NIC          0x0004
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_SHUTDOWN           0x0005
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_OPEN               0x0006
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_CLOSE              0x0007
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_TRANSMIT           0x0008
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_SET_MCAST_ADDR     0x0009
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_SET_STATION_ADDR   0x000A
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_SET_PACKET_FILTER  0x000B
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_GET_INFORMATION    0x000C
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_GET_STATISTICS     0x000D
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_CLEAR_STATISTICS   0x000E
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_INITIATE_DIAGS     0x000F
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_FORCE_INTERRUPT    0x0010
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_GET_MCAST_ADDR     0x0011
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_GET_NIC_TYPE       0x0012
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_GET_NDIS_INFO      0x0013
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR                0x0014
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STOP_UNDI               0x0015
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_GET_STATE          0x0016
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_MCAST_ADDR_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_START_UNDI_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_STARTUP_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_CLEANUP_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_INITIALIZE_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  IN PXENV_UNDI_MCAST_ADDR_T  R_Mcast_Buf;  ///< multicast address list
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_RESET_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_SHUTDOWN_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  IN PXENV_UNDI_MCAST_ADDR_T  McastBuffer;  /* In: */
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  /* See t_PXENV_UNDI_MCAST_ADDR. */
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_OPEN_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_CLOSE_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:PXENV_UNDI_TBD_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_TRANSMIT_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  IN PXENV_UNDI_MCAST_ADDR_T  McastBuffer;  ///<  In: 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_SET_MCAST_ADDR_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_SET_STATION_ADDR_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:typedef struct s_PXENV_UNDI_SET_PACKET_FILTER {
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_SET_PACKET_FILTER_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_GET_INFORMATION_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_GET_STATISTICS_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_CLEAR_STATISTICS_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_INITIATE_DIAGS_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_FORCE_INTERRUPT_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_GET_MCAST_ADDR_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_GET_NIC_TYPE_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_GET_NDIS_INFO_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  IN OUT UINT16 FuncFlag; ///< In: PXENV_UNDI_ISR_IN_xxx 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  /* Out: PXENV_UNDI_ISR_OUT_xxx */
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_ISR_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_IN_START 1 /* This function must be first */
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_IN_PROCESS 2 /* Call to start processing one of */
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_IN_GET_NEXT  3 /* Call to start/continue receiving */
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:     Possible responses from PXENV_UNDI_ISR_IN_START
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_OUT_OURS 0 ///< This is our interrupt.  Deal  with it. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_OUT_NOT_OURS 1 ///< This is not our interrupt.
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:     Possible responses from PXENV_UNDI_ISR_IN_PROCESS and
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:     PXENV_UNDI_ISR_IN_PROCESS
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_OUT_DONE 0       ///< We are done processing this  interrupt. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_OUT_TRANSMIT 2   ///< We completed a transmit interrupt. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_OUT_RECEIVE  3   ///< Get data from receive buffer. 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_OUT_BUSY     4 /* ? */
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_STOP_UNDI_T;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_STARTED      1     ///< not even initialized 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_INITIALIZED  2     ///< initialized and closed (not opened) 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_OPENED       3     ///< initialized & opened 
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16      UNDI_State;
UDK-uefi-development-kit/edk2/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_GET_STATE_T;
UDK-uefi-development-kit/edk2/Vlv2TbltDevicePkg/PlatformPkgGccX64.dsc:  DEFINE      UNDI_DXE_ARCHITECTURE   = 64
UDK-uefi-development-kit/edk2/Vlv2TbltDevicePkg/PlatformPkgGccX64.dsc:  DEFINE      UNDI_DXE_ARCHITECTURE   = 32
UDK-uefi-development-kit/edk2/Vlv2TbltDevicePkg/PlatformPkgIA32.dsc:  DEFINE      UNDI_DXE_ARCHITECTURE   = 64
UDK-uefi-development-kit/edk2/Vlv2TbltDevicePkg/PlatformPkgIA32.dsc:  DEFINE      UNDI_DXE_ARCHITECTURE   = 32
UDK-uefi-development-kit/edk2/Vlv2TbltDevicePkg/PlatformPkg.fdf:    SECTION PE32 = Vlv2MiscBinariesPkg/UNDI/RtkUndiDxe/$(DXE_ARCHITECTURE)/RtkUndiDxe.efi
UDK-uefi-development-kit/edk2/Vlv2TbltDevicePkg/PlatformPkg.fdf:    SECTION UI = "UNDI"
UDK-uefi-development-kit/edk2/Vlv2TbltDevicePkg/PlatformPkgX64.dsc:  DEFINE      UNDI_DXE_ARCHITECTURE   = 64
UDK-uefi-development-kit/edk2/Vlv2TbltDevicePkg/PlatformPkgX64.dsc:  DEFINE      UNDI_DXE_ARCHITECTURE   = 32
UDK-uefi-development-kit/edk2/Vlv2TbltDevicePkg/PlatformPkgGcc.fdf:    SECTION PE32 = Vlv2MiscBinariesPkg/UNDI/RtkUndiDxe/$(DXE_ARCHITECTURE)/RtkUndiDxe.efi
UDK-uefi-development-kit/edk2/Vlv2TbltDevicePkg/PlatformPkgGcc.fdf:    SECTION UI = "UNDI"
UDK-uefi-development-kit/edk2/Vlv2TbltDevicePkg/PciPlatform/BoardPciPlatform.c:#define PXE_UNDI_OPTION_ROM_INTELPXE_GUID \
UDK-uefi-development-kit/edk2/OvmfPkg/OvmfPkgIa32X64.dsc:  # DEBUG_UNDI      0x00010000  // UNDI Driver
UDK-uefi-development-kit/edk2/OvmfPkg/OvmfPkgIa32.dsc:  # DEBUG_UNDI      0x00010000  // UNDI Driver
UDK-uefi-development-kit/edk2/OvmfPkg/OvmfPkgX64.dsc:  # DEBUG_UNDI      0x00010000  // UNDI Driver
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/FV/MEMFD.fd matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/FV/DXEFV.Fv matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/FV/Ffs/3B1DEAB5-C75D-442e-9238-8E2FFB62B0BBUefiPxe4BcDxe/3B1DEAB5-C75D-442e-9238-8E2FFB62B0BBSEC2.1.pe32 matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/FV/Ffs/3B1DEAB5-C75D-442e-9238-8E2FFB62B0BBUefiPxe4BcDxe/3B1DEAB5-C75D-442e-9238-8E2FFB62B0BB.ffs matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/FV/Ffs/A2f436EA-A127-4EF8-957C-8048606FF670SnpDxe/A2f436EA-A127-4EF8-957C-8048606FF670.ffs matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/FV/Ffs/A2f436EA-A127-4EF8-957C-8048606FF670SnpDxe/A2f436EA-A127-4EF8-957C-8048606FF670SEC2.1.pe32 matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/FV/Ffs/9E21FD93-9C72-4c15-8C4B-E77F1DB2D792/9E21FD93-9C72-4c15-8C4B-E77F1DB2D792SEC1.guided.dummy matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/FV/Ffs/9E21FD93-9C72-4c15-8C4B-E77F1DB2D792/9E21FD93-9C72-4c15-8C4B-E77F1DB2D792SEC1.2fv.sec matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/Shell.debug matches
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Acpi/BootScriptExecutorDxe/BootScriptExecutorDxe/OUTPUT/X64/S3Asm.i:} PXE_HW_UNDI;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Acpi/BootScriptExecutorDxe/BootScriptExecutorDxe/OUTPUT/X64/S3Asm.i:} PXE_SW_UNDI;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Acpi/BootScriptExecutorDxe/BootScriptExecutorDxe/OUTPUT/X64/S3Asm.i:  PXE_HW_UNDI hw;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Acpi/BootScriptExecutorDxe/BootScriptExecutorDxe/OUTPUT/X64/S3Asm.i:  PXE_SW_UNDI sw;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Acpi/BootScriptExecutorDxe/BootScriptExecutorDxe/OUTPUT/X64/S3Asm.i:} PXE_UNDI;
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/UefiPxeBcDxe/UefiPxeBcDxe/DEBUG/UefiPxe4BcDxe.dll matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/UefiPxeBcDxe/UefiPxeBcDxe/DEBUG/UefiPxe4BcDxe.debug matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/UefiPxeBcDxe/UefiPxeBcDxe/DEBUG/UefiPxe4BcDxe.efi matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/UefiPxeBcDxe/UefiPxeBcDxe/OUTPUT/UefiPxe4BcDxe.lib matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/UefiPxeBcDxe/UefiPxeBcDxe/OUTPUT/UefiPxe4BcDxe.efi matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/UefiPxeBcDxe/UefiPxeBcDxe/OUTPUT/PxeBcDhcp.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/DEBUG/SnpDxe.dll matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/DEBUG/SnpDxe.efi matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/DEBUG/SnpDxe.debug matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Callback.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Nvdata.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Receive_filters.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/SnpDxe.lib matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Stop.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Transmit.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Station_address.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/SnpDxe.efi matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Start.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Reset.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Shutdown.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Statistics.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Mcast_ip_to_mac.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Initialize.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Get_status.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Receive.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/WaitForPacket.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Snp.obj matches
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/EbcDxe/EbcDxe/OUTPUT/X64/EbcLowLevel.i:} PXE_HW_UNDI;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/EbcDxe/EbcDxe/OUTPUT/X64/EbcLowLevel.i:} PXE_SW_UNDI;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/EbcDxe/EbcDxe/OUTPUT/X64/EbcLowLevel.i:  PXE_HW_UNDI hw;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/EbcDxe/EbcDxe/OUTPUT/X64/EbcLowLevel.i:  PXE_SW_UNDI sw;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/MdeModulePkg/Universal/EbcDxe/EbcDxe/OUTPUT/X64/EbcLowLevel.i:} PXE_UNDI;
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiPxe4BcDxe.debug matches
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/Library/CpuExceptionHandlerLib/DxeCpuExceptionHandlerLib/OUTPUT/X64/ExceptionHandlerAsm.i:} PXE_HW_UNDI;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/Library/CpuExceptionHandlerLib/DxeCpuExceptionHandlerLib/OUTPUT/X64/ExceptionHandlerAsm.i:} PXE_SW_UNDI;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/Library/CpuExceptionHandlerLib/DxeCpuExceptionHandlerLib/OUTPUT/X64/ExceptionHandlerAsm.i:  PXE_HW_UNDI hw;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/Library/CpuExceptionHandlerLib/DxeCpuExceptionHandlerLib/OUTPUT/X64/ExceptionHandlerAsm.i:  PXE_SW_UNDI sw;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/Library/CpuExceptionHandlerLib/DxeCpuExceptionHandlerLib/OUTPUT/X64/ExceptionHandlerAsm.i:} PXE_UNDI;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/CpuIo2Dxe/CpuIo2Dxe/OUTPUT/X64/IoFifo.i:} PXE_HW_UNDI;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/CpuIo2Dxe/CpuIo2Dxe/OUTPUT/X64/IoFifo.i:} PXE_SW_UNDI;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/CpuIo2Dxe/CpuIo2Dxe/OUTPUT/X64/IoFifo.i:  PXE_HW_UNDI hw;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/CpuIo2Dxe/CpuIo2Dxe/OUTPUT/X64/IoFifo.i:  PXE_SW_UNDI sw;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/CpuIo2Dxe/CpuIo2Dxe/OUTPUT/X64/IoFifo.i:} PXE_UNDI;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/CpuDxe/CpuDxe/OUTPUT/X64/CpuAsm.i:} PXE_HW_UNDI;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/CpuDxe/CpuDxe/OUTPUT/X64/CpuAsm.i:} PXE_SW_UNDI;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/CpuDxe/CpuDxe/OUTPUT/X64/CpuAsm.i:  PXE_HW_UNDI hw;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/CpuDxe/CpuDxe/OUTPUT/X64/CpuAsm.i:  PXE_SW_UNDI sw;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/CpuDxe/CpuDxe/OUTPUT/X64/CpuAsm.i:} PXE_UNDI;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/CpuDxe/CpuDxe/OUTPUT/X64/MpAsm.i:} PXE_HW_UNDI;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/CpuDxe/CpuDxe/OUTPUT/X64/MpAsm.i:} PXE_SW_UNDI;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/CpuDxe/CpuDxe/OUTPUT/X64/MpAsm.i:  PXE_HW_UNDI hw;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/CpuDxe/CpuDxe/OUTPUT/X64/MpAsm.i:  PXE_SW_UNDI sw;
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiCpuPkg/CpuDxe/CpuDxe/OUTPUT/X64/MpAsm.i:} PXE_UNDI;
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/SnpDxe.efi matches
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/ShellPkg/Library/UefiHandleParsingLib/UefiHandleParsingLib/DEBUG/UefiHandleParsingLibStrDefs.h:#define STR_UNDI_IPV6_INFO                                   0x011E
UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/ShellPkg/Library/UefiHandleParsingLib/UefiHandleParsingLib/DEBUG/AutoGen.c:// 0x011E: STR_UNDI_IPV6_INFO:0x011E
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/ShellPkg/Library/UefiHandleParsingLib/UefiHandleParsingLib/OUTPUT/UefiHandleParsingLib.lib matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/ShellPkg/Library/UefiHandleParsingLib/UefiHandleParsingLib/OUTPUT/UefiHandleParsingLib.obj matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/ShellPkg/Application/Shell/Shell/DEBUG/Shell.debug matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/UefiPxe4BcDxe.efi matches
Binary file UDK-uefi-development-kit/edk2/Build/OvmfX64/DEBUG_GCC49/X64/SnpDxe.debug matches
UDK-uefi-development-kit/edk2/QuarkPlatformPkg/Pci/Dxe/PciPlatform/PciPlatform.h:#define TANX_UNDI_OPTION_ROM_FILE_GUID \
UDK-uefi-development-kit/edk2/QuarkPlatformPkg/Pci/Dxe/PciPlatform/PciPlatform.h:#define PXE_UNDI_OPTION_ROM_FILE_GUID \
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiDebug.h:#define EFI_D_UNDI        0x00010000          // UNDI Driver
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiDebug.h:#define EFI_D_LOADFILE    0x00020000          // UNDI Driver
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiDebug.h:                        EFI_D_BLKIO | EFI_D_NET | EFI_D_UNDI | EFI_D_VERBOSE)       
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI ROM ID and devive ID signature
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Return UNDI operational state.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Change UNDI operational state from Stopped to Started.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Change UNDI operational state from Started to Stopped.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Get UNDI initialization information.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Changed UNDI operational state from Started to Initialized.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Change the UNDI operational state from Initialized to Started.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Last valid PXE UNDI OpCode number.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Get State
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Start
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Stop
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Get Init Info
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Get Config Info
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Initialize
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Reset
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Shutdown
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Interrupt Enables
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Receive Filters
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Station Address
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Statistics
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI MCast IP to MAC
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI NvData
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Get Status
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// NICs and UNDIs may transmit multiple buffers per interrupt.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Fill Header
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Transmit
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// S/W UNDI only.  Return after the packet has been transmitted.  A
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:#define PXE_OPFLAGS_SWUNDI_TRANSMIT_OPMASK  0x0001
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Receive
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// implemented by all UNDIs.  COMMAND_QUEUED is only needed by UNDIs
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Get State
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Start
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Get Init Info
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Initialize
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Reset
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Shutdown
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Interrupt Enables
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Receive Filters
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Station Address
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Statistics
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI MCast IP to MAC
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI NvData
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Get Status
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Fill Header
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Transmit
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Receive
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Common StatCodes returned by all UNDI commands, UNDI protocol functions
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:#define PXE_STATCODE_INVALID_UNDI         0x000F
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// This interface number must be passed to the S/W UNDI Start command.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// This interface number is returned by the S/W UNDI Get State and
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Setting this flag directs the UNDI to queue this command for later
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// execution if the UNDI is busy and it supports command queuing.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// These two bit values are used to determine if there are more UNDI
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  UINT8   Len;            // sizeof(PXE_HW_UNDI)
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:} PXE_HW_UNDI;
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI operation state
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// If set, CDB identified in CDBaddr port is given to UNDI.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  UINT8   Len;            // sizeof(PXE_SW_UNDI)
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:} PXE_SW_UNDI;
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  PXE_HW_UNDI hw;
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  PXE_SW_UNDI sw;
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:} PXE_UNDI;
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI command interface revision.  These are the values that get sent
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:#define PXE_ROMID_IMP_HW_UNDI                             0x80000000
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:    // See S/W UNDI ROMID structure definition for PCI and
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will never request a delay smaller than 10 microseconds
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // microseconds before returning control to the UNDI.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI may need to block multi-threaded/multi-processor access to
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // device.  To this end, a blocking service is needed by the UNDI.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // When UNDI needs a block, it will call Block() passing a non-zero
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // value.  When UNDI no longer needs a block, it will call Block()
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // do not return control to the UNDI until the previous Block() is
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will pass the virtual address of a buffer and the virtual
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will read or write the device io space using this call back
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will never request a delay smaller than 10 microseconds
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // microseconds before returning control to the UNDI.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI may need to block multi-threaded/multi-processor access to
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // device.  To this end, a blocking service is needed by the UNDI.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // When UNDI needs a block, it will call Block() passing a non-zero
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // value.  When UNDI no longer needs a block, it will call Block()
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // do not return control to the UNDI until the previous Block() is
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will pass the virtual address of a buffer and the virtual
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will read or write the device io space using this call back
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will pass the virtual address of a buffer, direction of the data
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will pass the virtual and mapped addresses of a buffer
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will pass the virtual and mapped addresses of a buffer
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // protocol driver can provide anything for this Unique_ID, UNDI remembers
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // the Initialize command. Giving UNDI more memory will generally
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // If MemoryRequired is zero, the UNDI does not need and will not
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // this UNDI.  This information is needed when allocating receive
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // be allocated by the UNDI.  If MemoryRequired is non-zero, this
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // This identifies the PCI network device that this UNDI interface
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // This identifies the PCC network device that this UNDI interface
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // be in contiguous physical memory and cannot be swapped out.  The UNDI
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // default link speed (operation depends on UNDI/NIC functionality).
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // If these fields are set to zero, the UNDI will allocate buffer
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // the UNDI and network device do not use external memory buffers.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // Memory used by the UNDI and network device is allocated from the
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI/NIC.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Library/EdkIIGlueLib/Include/Library/EdkIIGlueDebugLib.h:#undef EFI_D_UNDI
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Library/EdkIIGlueLib/Include/Library/EdkIIGlueDebugLib.h:#define DEBUG_UNDI      0x00010000  // UNDI Driver
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Library/EdkIIGlueLib/Include/Library/EdkIIGlueDebugLib.h:#define DEBUG_LOADFILE  0x00020000  // UNDI Driver
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Library/EdkIIGlueLib/Include/Library/EdkIIGlueDebugLib.h:#define EFI_D_UNDI      DEBUG_UNDI
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Efi/Protocol/EfiNetworkInterfaceIdentifier/EfiNetworkInterfaceIdentifier.h:  // For PXE/UNDI this is the first byte of the !PXE structure.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Efi/Protocol/EfiNetworkInterfaceIdentifier/EfiNetworkInterfaceIdentifier.h:  // For 16-bit UNDI, this is the first byte of the option ROM in
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Efi/Protocol/EfiNetworkInterfaceIdentifier/EfiNetworkInterfaceIdentifier.h:  // For 32/64-bit S/W UNDI, this is the first byte of the EFI ROM
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Efi/Protocol/EfiNetworkInterfaceIdentifier/EfiNetworkInterfaceIdentifier.h:  // For H/W UNDI, this is set to zero.
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Efi/Protocol/EfiNetworkInterfaceIdentifier/EfiNetworkInterfaceIdentifier.h:  // For EfiNetworkInterfaceUndi this field is "UNDI".
UDK-uefi-development-kit/edk2/EdkCompatibilityPkg/Foundation/Efi/Protocol/PxeBaseCode/PxeBaseCode.h:#define EFI_PXE_BASE_CODE_BOOT_TYPE_DOSUNDI           3
UDK-uefi-development-kit/edk2/AppPkg/Applications/Python/Ipf/pyconfig.h:#undef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/edk2/AppPkg/Applications/Python/Python-2.7.10/Include/pyport.h:#if defined(X87_DOUBLE_ROUNDING) && !defined(HAVE_PY_SET_53BIT_PRECISION)
UDK-uefi-development-kit/edk2/AppPkg/Applications/Python/Python-2.7.10/Include/pymath.h:#  ifdef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/edk2/AppPkg/Applications/Python/Python-2.7.10/PyMod-2.7.10/Include/pyport.h:#if defined(X87_DOUBLE_ROUNDING) && !defined(HAVE_PY_SET_53BIT_PRECISION)
UDK-uefi-development-kit/edk2/AppPkg/Applications/Python/Python-2.7.10/Python/pymath.c:#ifdef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/edk2/AppPkg/Applications/Python/Python-2.7.10/Ia32/pyconfig.h:#undef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/edk2/AppPkg/Applications/Python/Python-2.7.10/X64/pyconfig.h:#undef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/edk2/AppPkg/Applications/Python/Python-2.7.2/Include/pyport.h:#if defined(X87_DOUBLE_ROUNDING) && !defined(HAVE_PY_SET_53BIT_PRECISION)
UDK-uefi-development-kit/edk2/AppPkg/Applications/Python/Python-2.7.2/Include/pymath.h:#  ifdef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/edk2/AppPkg/Applications/Python/Python-2.7.2/Lib/test/test_math.py:HAVE_DOUBLE_ROUNDING = (x + y == 1e16 + 4)
UDK-uefi-development-kit/edk2/AppPkg/Applications/Python/Python-2.7.2/Lib/test/test_math.py:    @unittest.skipIf(HAVE_DOUBLE_ROUNDING,
UDK-uefi-development-kit/edk2/AppPkg/Applications/Python/Python-2.7.2/Python/pymath.c:#ifdef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/edk2/AppPkg/Applications/Python/PyMod-2.7.2/Include/pyport.h:#if defined(X87_DOUBLE_ROUNDING) && !defined(HAVE_PY_SET_53BIT_PRECISION)
UDK-uefi-development-kit/edk2/AppPkg/Applications/Python/Ia32/pyconfig.h:#undef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/edk2/AppPkg/Applications/Python/X64/pyconfig.h:#undef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/edk2/BeagleBoardPkg/BeagleBoardPkg.dsc:#  DEBUG_UNDI      0x00010000  // UNDI Driver
Binary file UDK-uefi-development-kit/Documents/NetworkPkg Document With Modules.pdf matches
UDK-uefi-development-kit/Notes/MdePkg Notes.txt:        EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT_GUID
UDK-uefi-development-kit/Notes/NetworkPkg Notes.txt:   3) Check UNDI driver's IPv6 compatibility before start PXE boot over IPv6
UDK-uefi-development-kit/MyWorkSpace/ArmVirtPkg/ArmVirt.dsc.inc:  #  DEBUG_UNDI      0x00010000  // UNDI Driver
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Include/Library/NetLib.h:  The underlying UNDI driver may or may not support reporting media status from
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Include/Library/NetLib.h:  the correct media status for old UNDI driver, which doesn't support reporting 
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Include/Library/NetLib.h:  1) For UNDI with this capability, when the cable is not attached, there will
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Include/Library/NetLib.h:  2) for UNDI without this capability, in case that network cable is attached when
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Include/Library/NetLib.h:  Find the UNDI/SNP handle from controller and protocol GUID.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Include/Library/NetLib.h:  service binding instance that is installed on the UNDI/SNP handle.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Include/Library/NetLib.h:  UNDI/SNP handle.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Include/Library/NetLib.h:  @return The UNDI/SNP handle or NULL for errors.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  The underlying UNDI driver may or may not support reporting media status from
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  media status for old UNDI driver which doesn't support reporting media status
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  1) for UNDI with this capability, in case of cable is not attached, there will
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  2) for UNDI without this capability, in case that network cable is attached when
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  // Till now, GetStatus() report no media; while, in case UNDI not support
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  Find the UNDI/SNP handle from controller and protocol GUID.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  service binding instance that is install on UNDI/SNP handle.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  UNDI/SNP handle.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Library/DxeNetLib/DxeNetLib.c:  @return The UNDI/SNP handle or NULL for errors.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.h:} PXEBC_DHCP4_OPTION_UNDI;
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.h:#define DEFAULT_CLASS_ID_DATA "PXEClient:Arch:xxxxx:UNDI:003000"
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.h:#define DEFAULT_UNDI_TYPE     1
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.h:#define DEFAULT_UNDI_MAJOR    3
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.h:#define DEFAULT_UNDI_MINOR    0
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.h:  PXEBC_DHCP4_OPTION_UNDI           *Undi;
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.c:  OptList[Index]->OpCode  = DHCP4_TAG_UNDI;
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.c:  OptList[Index]->Length  = (UINT8) sizeof (PXEBC_DHCP4_OPTION_UNDI);
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.c:  OptEnt.Undi             = (PXEBC_DHCP4_OPTION_UNDI *) OptList[Index]->Data;
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.c:    OptEnt.Undi->Type       = DEFAULT_UNDI_TYPE;
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.c:    OptEnt.Undi->MajorVer   = DEFAULT_UNDI_MAJOR;
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/UefiPxeBcDxe/PxeBcDhcp.c:    OptEnt.Undi->MinorVer   = DEFAULT_UNDI_MINOR;
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/MnpDxe/MnpImpl.h:#define MNP_TX_BUFFER_INCREASEMENT    32    // Same as the recycling Q length for xmit_done in UNDI command.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Reset.c:  Call UNDI to reset the NIC.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Reset.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Reset.c:    // UNDI could not be reset. Return UNDI error.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Nvdata.c:  @retval EFI_INVALID_PARAMETER Invalid UNDI command.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Nvdata.c:  @retval EFI_UNSUPPORTED       Command is not supported by UNDI.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Nvdata.c:  @retval EFI_DEVICE_ERROR      Fail to execute UNDI command.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Nvdata.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  Call UNDI to initialize the interface.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  @retval EFI_SUCCESS           UNDI is initialized successfully.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  @retval EFI_DEVICE_ERROR      UNDI could not be initialized.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  // let UNDI decide/detect these values
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  // PXE_STATFLAGS_COMMAND_COMPLETE or PXE_STATFLAGS_COMMAND_FAILED, the command has not been executed by the UNDI.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:    // active connection to this network device. If the no media StatFlag is set, the UNDI and network 
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  // Compute tx/rx buffer sizes based on UNDI init info and parameters.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  // If UNDI support cable detect for INITIALIZE command, try it first.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Initialize.c:  // Try to update the MediaPresent field of EFI_SIMPLE_NETWORK_MODE if the UNDI support it.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Station_address.c:  Call UNDI to read the MAC address of the NIC and update the mode structure 
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Station_address.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Station_address.c:  Call UNDI to set a new MAC address for the NIC.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Station_address.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Station_address.c:    // UNDI command failed.  Return UNDI status to caller.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Mcast_ip_to_mac.c:  @retval EFI_INVALID_PARAMETER Invalid UNDI command. 
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Mcast_ip_to_mac.c:  @retval EFI_UNSUPPORTED       Command is not supported by UNDI. 
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Mcast_ip_to_mac.c:  @retval EFI_DEVICE_ERROR      Fail to execute UNDI command. 
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Mcast_ip_to_mac.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Mcast_ip_to_mac.c:    // UNDI command failed.  Return EFI_DEVICE_ERROR
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive.c:  Call UNDI to receive a packet and fills in the data in the input pointers.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive.c:  @retval EFI_DEVICE_ERROR      Fail to execute UNDI command.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive.c:  // network cable should be present. While, some UNDI driver may not report
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/WaitForPacket.c:  // Fill in CDB for UNDI GetStatus().
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/WaitForPacket.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Get_status.c:  field of EFI_SIMPLE_NETWORK_MODE if UNDI support it.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Get_status.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Get_status.c:      // UNDI has written some transmitted buffer addresses into the DB. Store them into Snp->RecycledTxBuf.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Get_status.c:  // Update MediaPresent field of EFI_SIMPLE_NETWORK_MODE if the UNDI support
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Shutdown.c:  Call UNDI to shut down the interface.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Shutdown.c:  @retval EFI_SUCCESS        UNDI is shut down successfully.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Shutdown.c:  @retval EFI_DEVICE_ERROR   UNDI could not be shut down.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Shutdown.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Shutdown.c:    // UNDI could not be shutdown. Return UNDI error.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  This is a callback routine supplied to UNDI3.1 at undi_start time.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  New callbacks for 3.1: there won't be a virtual2physical callback for UNDI 3.1
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  @param UniqueId  This was supplied to UNDI at Undi_Start, SNP uses this to
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  @param UniqueId      This was supplied to UNDI at Undi_Start, SNP uses this to
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  IO routine for UNDI3.1.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  @param UniqueId       This was supplied to UNDI at Undi_Start, SNP uses this
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  @param UniqueId      This was supplied to UNDI at Undi_Start, SNP uses this to
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  @param UniqueId    This was supplied to UNDI at Undi_Start, SNP uses this to
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  This is a callback routine supplied to UNDI at undi_start time. The virtual
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Callback.c:  @param UniqueId    This was supplied to UNDI at Undi_Start, SNP uses this to
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Stop.c:  Call UNDI to stop the interface and changes the snp state.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Stop.c:  // Issue UNDI command
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Start.c:  Call UNDI to start the interface and changes the snp state.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Start.c:  @retval EFI_SUCCESS            UNDI is started successfully.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Start.c:  @retval EFI_DEVICE_ERROR       UNDI could not be started.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Start.c:  // Initialize UNDI Start CDB for H/W UNDI
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Start.c:  // Make changes to H/W UNDI Start CDB if this is
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Start.c:  // a S/W UNDI.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Start.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Start.c:    // UNDI could not be started. Return UNDI error.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Statistics.c:  // Initialize UNDI Statistics CDB
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Statistics.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Statistics.c:  // Convert the UNDI statistics information to SNP statistics
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Transmit.c:  Call UNDI to create the meadia header for the given data buffer.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Transmit.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Transmit.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  @retval EFI_INVALID_PARAMETER Invalid UNDI command.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  @retval EFI_UNSUPPORTED       Command is not supported by UNDI.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  @retval EFI_DEVICE_ERROR      Fail to execute UNDI command.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:    // UNDI command failed.  Return UNDI status to caller.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  @retval EFI_DEVICE_ERROR      Fail to execute UNDI command.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  // Issue UNDI command and check result.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:    // UNDI command failed.  Return UNDI status to caller.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  @retval EFI_DEVICE_ERROR      Fail to execute UNDI command. 
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:    // UNDI command failed.  Return UNDI status to caller.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  // Convert UNDI32 StatFlags to EFI SNP filter flags.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Receive_filters.c:  // check if we are asked to enable or disable something that the UNDI
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:(EFIAPI *ISSUE_UNDI32_COMMAND) (
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  //  Pointer to S/W UNDI API entry point
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  //  This will be NULL for H/W UNDI
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  ISSUE_UNDI32_COMMAND  IssueUndi32Command;
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  //  Allocated tx/rx buffer that was passed to UNDI Initialize.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  // UNDI structure, we need to remember the init info for a long time!
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  // Whether UNDI support reporting media status from GET_STATUS command,
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  // Whether UNDI support cable detect for INITIALIZE command,
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  // Array of the recycled transmit buffer address from UNDI.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @retval EFI_DEVICE_ERROR       UNDI could not be started
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @retval EFI_SUCCESS            UNDI is started successfully
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @retval EFI_SUCCESS           UNDI is initialized successfully
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @retval EFI_DEVICE_ERROR      UNDI could not be initialized
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @retval EFI_SUCCESS        UNDI is shut down successfully
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @retval EFI_DEVICE_ERROR   UNDI could not be shut down
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  field of EFI_SIMPLE_NETWORK_MODE if UNDI support it.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  This is a callback routine supplied to UNDI3.1 at undi_start time.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  UNDI call this routine when it wants to have exclusive access to a critical
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  there won't be a virtual2physical callback for UNDI 3.1 because undi3.1 uses
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @param UniqueId  This was supplied to UNDI at Undi_Start, SNP uses this to
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  UNDI call this routine with the number of micro seconds when it wants to
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @param UniqueId      This was supplied to UNDI at Undi_Start, SNP uses this to
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  This is the IO routine for UNDI3.1 to start CPB.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @param UniqueId       This was supplied to UNDI at Undi_Start, SNP uses this
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  UNDI call this routine when it has to map a CPU address to a device
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @param UniqueId      - This was supplied to UNDI at Undi_Start, SNP uses this to store
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  UNDI call this routine when it wants to unmap an address that was previously
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @param UniqueId    This was supplied to UNDI at Undi_Start, SNP uses this to store.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  This is a callback routine supplied to UNDI at undi_start time.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  UNDI call this routine when it wants synchronize the virtual buffer contents
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.h:  @param UniqueId    This was supplied to UNDI at Undi_Start, SNP uses this to store
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  One notified function to stop UNDI device when gBS->ExitBootServices() called.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // Shutdown and stop UNDI driver
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  Send command to UNDI. It does nothing currently.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  @param Cdb   command to be sent to UNDI.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  PXE_UNDI                                  *Pxe;
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  DEBUG ((EFI_D_INFO, "Support(): UNDI3.1 found on handle %p\n", Controller));
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  Pxe = (PXE_UNDI *) (UINTN) (NiiProtocol->Id);
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // Do S/W UNDI specific checks.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  if ((Pxe->hw.Implementation & PXE_ROMID_IMP_HW_UNDI) == 0) {
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  PXE_UNDI                                  *Pxe;
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  DEBUG ((EFI_D_INFO, "Start(): UNDI3.1 found\n"));
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  Pxe = (PXE_UNDI *) (UINTN) (Nii->Id);
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:    DEBUG ((EFI_D_NET, "\nUNDI does not have promiscuous or broadcast support."));
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // OK, we like this UNDI, and we know snp is not already there on this handle
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  if ((Pxe->hw.Implementation & PXE_ROMID_IMP_HW_UNDI) != 0) {
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:      Snp->IssueUndi32Command = (ISSUE_UNDI32_COMMAND) (UINTN) Pxe->sw.EntryPoint;
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:      Snp->IssueUndi32Command = (ISSUE_UNDI32_COMMAND) (UINTN) ((UINT8) (UINTN) Pxe + Pxe->sw.EntryPoint);
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // Allocate a global CPB and DB buffer for this UNDI interface.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // -UNDI 3.0 wants all the addresses passed to it (even the cpb and db) to be
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // -This is not a requirement for 3.1 or later UNDIs but the code looks
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // -it is OK to allocate one global set of CPB, DB pair for each UNDI
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // initialize the UNDI first for this.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // We should not leave UNDI started and initialized here. this DriverStart()
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // routine must only find and attach the SNP interface to UNDI layer that it
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // The UNDI layer will be started when upper layers call Snp->start.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // initialized UNDI here, now we are done, do a shutdown and stop of the
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  // UNDI interface!
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/SnpDxe/Snp.c:  @retval EFI_SUCEESS      Initialization routine has found UNDI hardware,
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/Ip4Dxe/Ip4If.c:                                is installed. Most like the UNDI handle.
UDK-uefi-development-kit/MyWorkSpace/MdeModulePkg/Universal/Network/Ip4Dxe/Ip4If.h:                                is installed. Most like the UNDI handle.
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.c:  OptList[Index]->OpCode  = DHCP4_TAG_UNDI;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.c:  OptList[Index]->Length  = (UINT8) sizeof (PXEBC_DHCP4_OPTION_UNDI);
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.c:  OptEnt.Undi             = (PXEBC_DHCP4_OPTION_UNDI *) OptList[Index]->Data;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.c:    OptEnt.Undi->Type     = DEFAULT_UNDI_TYPE;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.c:    OptEnt.Undi->MajorVer = DEFAULT_UNDI_MAJOR;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.c:    OptEnt.Undi->MinorVer = DEFAULT_UNDI_MINOR;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.h:#define DEFAULT_CLASS_ID_DATA "PXEClient:Arch:xxxxx:UNDI:003000"
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.h:#define DEFAULT_UNDI_TYPE     1
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.h:#define DEFAULT_UNDI_MAJOR    3
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.h:#define DEFAULT_UNDI_MINOR    0
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.h:} PXEBC_DHCP4_OPTION_UNDI;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp4.h:  PXEBC_DHCP4_OPTION_UNDI           *Undi;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp6.c:  OptList[Index]->OpCode     = HTONS (DHCP6_OPT_UNDI);
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp6.c:  OptEnt.Undi                = (PXEBC_DHCP6_OPTION_UNDI *) OptList[Index]->Data;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp6.c:    OptEnt.Undi->Type        = DEFAULT_UNDI_TYPE;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp6.c:    OptEnt.Undi->MajorVer    = DEFAULT_UNDI_MAJOR;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp6.c:    OptEnt.Undi->MinorVer    = DEFAULT_UNDI_MINOR;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:  Check whether UNDI protocol supports IPv6.
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:  @param[out]  Ipv6Support       TRUE if UNDI supports IPv6.
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:  @retval EFI_SUCCESS            Get the result whether UNDI supports IPv6 by NII or AIP protocol successfully.
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:  @retval EFI_NOT_FOUND          Don't know whether UNDI supports IPv6 since NII or AIP is not available.
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:  // Check whether the UNDI supports IPv6 by NII protocol.
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:  // Check whether the UNDI supports IPv6 by AIP protocol.
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:  *Ipv6Support = ((EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT *) InfoBlock)->Ipv6Support;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDriver.c:    // Fail to get the data whether UNDI supports IPv6. Set default value.
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp6.h:} PXEBC_DHCP6_OPTION_UNDI;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/UefiPxeBcDxe/PxeBcDhcp6.h:  PXEBC_DHCP6_OPTION_UNDI           *Undi;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/Dhcp6Dxe/Dhcp6Io.c:  is detected. Note that the underlying UNDI driver may not support reporting
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp6.c:  OptList[Index]->OpCode     = HTONS (DHCP6_OPT_UNDI);
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp6.c:  OptEnt.Undi                = (HTTP_BOOT_DHCP6_OPTION_UNDI *) OptList[Index]->Data;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp6.c:    OptEnt.Undi->Type        = DEFAULT_UNDI_TYPE;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp6.c:    OptEnt.Undi->MajorVer    = DEFAULT_UNDI_MAJOR;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp6.c:    OptEnt.Undi->MinorVer    = DEFAULT_UNDI_MINOR;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp4.h:} HTTP_BOOT_DHCP4_OPTION_UNDI;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp4.h:  HTTP_BOOT_DHCP4_OPTION_UNDI           *Undi;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp4.h:#define DEFAULT_CLASS_ID_DATA "HTTPClient:Arch:xxxxx:UNDI:003000"
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp4.h:#define DEFAULT_UNDI_TYPE     1
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp4.h:#define DEFAULT_UNDI_MAJOR    3
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp4.h:#define DEFAULT_UNDI_MINOR    0
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp6.h:} HTTP_BOOT_DHCP6_OPTION_UNDI;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp6.h:  HTTP_BOOT_DHCP6_OPTION_UNDI           *Undi;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp4.c:  OptList[Index]->OpCode  = DHCP4_TAG_UNDI;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp4.c:  OptList[Index]->Length  = (UINT8) sizeof (HTTP_BOOT_DHCP4_OPTION_UNDI);
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp4.c:  OptEnt.Undi             = (HTTP_BOOT_DHCP4_OPTION_UNDI *) OptList[Index]->Data;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp4.c:    OptEnt.Undi->Type     = DEFAULT_UNDI_TYPE;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp4.c:    OptEnt.Undi->MajorVer = DEFAULT_UNDI_MAJOR;
UDK-uefi-development-kit/MyWorkSpace/NetworkPkg/HttpBootDxe/HttpBootDhcp4.c:    OptEnt.Undi->MinorVer = DEFAULT_UNDI_MINOR;
Binary file UDK-uefi-development-kit/MyWorkSpace/Conf/.cache/build.db matches
UDK-uefi-development-kit/MyWorkSpace/Omap35xxPkg/Omap35xxPkg.dsc:#  DEBUG_UNDI      0x00010000  // UNDI Driver
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  Initialization functions for EFI UNDI32 driver.
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:PXE_SW_UNDI             *pxe_31 = NULL;  // 3.1 entry
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:UNDI32_DEV              *UNDI32DeviceList[MAX_NIC_INTERFACES];
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:UNDI_CONFIG_TABLE       *UndiDataPointer = NULL;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:// UNDI Class Driver Global Variables
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:    // UNDI32DeviceList is an array of pointers
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:      UNDI32DeviceList[Index]->NIIProtocol_31.Id = (UINT64) (UINTN) Pxe31Pointer;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:        (VOID **) &(UNDI32DeviceList[Index])
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  configuration table for UNDI to work at runtime!
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32_DEV                *UNDI32Device;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                  sizeof (UNDI32_DEV),
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                  (VOID **) &UNDI32Device
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  ZeroMem ((CHAR8 *) UNDI32Device, sizeof (UNDI32_DEV));
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                    &UNDI32Device->NicInfo.OriginalPciAttributes
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                    (sizeof (PXE_SW_UNDI) + sizeof (PXE_SW_UNDI) + 32),
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:      sizeof (PXE_SW_UNDI) + sizeof (PXE_SW_UNDI) + 32
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:      pxe_31 = (PXE_SW_UNDI *) ((UINTN) (TmpPxePointer + 8));
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:      pxe_31 = (PXE_SW_UNDI *) TmpPxePointer;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.Id = (UINT64) (UINTN) (pxe_31);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                            &UNDI32Device->NicInfo.Config
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  CfgHdr = (PCI_CONFIG_HEADER *) &(UNDI32Device->NicInfo.Config[0]);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.IfNum  = pxe_31->IFcnt | pxe_31->IFcntExt << 8;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  PxeUpdate (&UNDI32Device->NicInfo, pxe_31);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NicInfo.Io_Function                    = PciIoFncs;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32DeviceList[UNDI32Device->NIIProtocol_31.IfNum] = UNDI32Device;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->Undi32BaseDevPath                      = UndiDevicePath;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:            &UNDI32Device->Undi32DevPath,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:            UNDI32Device->Undi32BaseDevPath,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:            &UNDI32Device->NicInfo
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->Signature                     = UNDI_DEV_SIGNATURE;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.Revision       = EFI_NETWORK_INTERFACE_IDENTIFIER_PROTOCOL_REVISION_31;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.Type           = EfiNetworkInterfaceUndi;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.MajorVer       = PXE_ROMID_MAJORVER;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.MinorVer       = PXE_ROMID_MINORVER_31;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.ImageSize      = 0;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.ImageAddr      = 0;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.Ipv6Supported  = TRUE;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.StringId[0]    = 'U';
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.StringId[1]    = 'N';
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.StringId[2]    = 'D';
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->NIIProtocol_31.StringId[3]    = 'I';
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->DeviceHandle                  = NULL;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->Aip.GetInformation            = UndiAipGetInfo;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->Aip.SetInformation            = UndiAipSetInfo;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32Device->Aip.GetSupportedTypes         = UndiAipGetSupportedTypes;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                  &UNDI32Device->DeviceHandle,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                  &UNDI32Device->NIIProtocol_31,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                  UNDI32Device->Undi32DevPath,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                  &UNDI32Device->Aip,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                  UNDI32Device->DeviceHandle,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                  &UNDI32Device->DeviceHandle,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                  &UNDI32Device->NIIProtocol_31,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                  UNDI32Device->Undi32DevPath,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                  &UNDI32Device->Aip,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32DeviceList[UNDI32Device->NIIProtocol_31.IfNum] = NULL;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  gBS->FreePool (UNDI32Device->Undi32DevPath);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                    UNDI32Device->NicInfo.OriginalPciAttributes,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  gBS->FreePool (UNDI32Device);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI32_DEV                                *UNDI32Device;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:      UNDI32Device = UNDI_DEV_FROM_THIS (NIIProtocol);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                        UNDI32Device->Undi32DevPath,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                        &UNDI32Device->NIIProtocol_31,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:          Status = UNDI32Device->NicInfo.Io_Function->Attributes (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                                                        UNDI32Device->NicInfo.Io_Function,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                                                        UNDI32Device->NicInfo.OriginalPciAttributes,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:          gBS->FreePool (UNDI32Device->Undi32DevPath);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:          gBS->FreePool (UNDI32Device);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  @param  BaseDevPtr           Pointer to the device path which the UNDI device
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  // set the environment ready (similar to UNDI_Start call) so that we can
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  // execute the other UNDI_ calls to get the mac address
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI_CONFIG_TABLE       *TmpData;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UNDI_CONFIG_TABLE       *UndiData;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:  UndiData = (UNDI_CONFIG_TABLE *)UndiDataPointer;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:    UndiData->NII_entry[Index].NII_InterfacePointer = &UNDI32DeviceList[Index]->NIIProtocol_31;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:    UndiData->NII_entry[Index].DevicePathPointer    = UNDI32DeviceList[Index]->Undi32DevPath;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:    TmpData = (UNDI_CONFIG_TABLE *) CfgPtr->VendorTable;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Init.c:    UndiData = (UNDI_CONFIG_TABLE *) CfgPtr->VendorTable;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_CALL_TABLE api_table[PXE_OPCODE_LAST_VALID+1] = { \
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,PXE_DBSIZE_NOT_USED,0, (UINT16)(ANY_STATE),UNDI_GetState },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {(UINT16)(DONT_CHECK),PXE_DBSIZE_NOT_USED,0,(UINT16)(ANY_STATE),UNDI_Start },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,PXE_DBSIZE_NOT_USED,0,MUST_BE_STARTED,UNDI_Stop },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,sizeof(PXE_DB_GET_INIT_INFO),0,MUST_BE_STARTED, UNDI_GetInitInfo },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,sizeof(PXE_DB_GET_CONFIG_INFO),0,MUST_BE_STARTED, UNDI_GetConfigInfo },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {sizeof(PXE_CPB_INITIALIZE),(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK),MUST_BE_STARTED,UNDI_Initialize },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,PXE_DBSIZE_NOT_USED,(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED,UNDI_Reset },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,PXE_DBSIZE_NOT_USED,0, MUST_BE_INITIALIZED,UNDI_Shutdown },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,PXE_DBSIZE_NOT_USED,(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED,UNDI_Interrupt },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED, UNDI_RecFilter },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED, UNDI_StnAddr },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED, (UINT16)(DONT_CHECK), (UINT16)(DONT_CHECK), MUST_BE_INITIALIZED, UNDI_Statistics },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {sizeof(PXE_CPB_MCAST_IP_TO_MAC),sizeof(PXE_DB_MCAST_IP_TO_MAC), (UINT16)(DONT_CHECK),MUST_BE_INITIALIZED, UNDI_ip2mac },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED, UNDI_NVData },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {PXE_CPBSIZE_NOT_USED,(UINT16)(DONT_CHECK),(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED, UNDI_Status },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {(UINT16)(DONT_CHECK),PXE_DBSIZE_NOT_USED,(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED, UNDI_FillHeader },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {(UINT16)(DONT_CHECK),PXE_DBSIZE_NOT_USED,(UINT16)(DONT_CHECK), MUST_BE_INITIALIZED, UNDI_Transmit },\
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  {sizeof(PXE_CPB_RECEIVE),sizeof(PXE_DB_RECEIVE),0,MUST_BE_INITIALIZED, UNDI_Receive } \
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  This routine determines the operational state of the UNDI.  It updates the state flags in the
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  to the caller of the UNDI API.
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_GetState (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  This routine is used to change the operational state of the UNDI from stopped to started.
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  UNDI as having already been started.
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  Since this UNDI supports both old and new undi specifications,
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  to provide it's I/O abstraction to the UNDI.
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Start (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:    // everything worked fine! In EFI 1.1, UNDI is not using the full
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:    // UNDI only uses the offset values. Since UNDI3.0 cannot provide any
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  This routine is used to change the operational state of the UNDI from started to stopped.
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  UNDI as having already not been shut down.
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Stop (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  applications to initialize the UNDI.  This will fill in data in the Data Block structure that is
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_GetInitInfo (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_GetConfigInfo (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  This routine resets the network adapter and initializes the UNDI using the parameters supplied in
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  Once the memory requirements of the UNDI are obtained by using the GetInitInfo command, a block
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  UNDI during the Initialize in the CPB.  This memory is used primarily for transmit and receive buffers.
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  the UNDI is now initialized.
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Initialize (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  This routine resets the network adapter and initializes the UNDI using the parameters supplied in
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Reset (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  interrupt enables are disabled.  Once the UNDI has been shutdown, it can then be stopped
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Shutdown (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  can still be polled by using the UNDI_GetState command.
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Interrupt (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_RecFilter (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_StnAddr (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Statistics (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_ip2mac (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  This is an optional function according to the UNDI specification  (or will be......)
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_NVData (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Status (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_FillHeader (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  are disabled, the transmit interrupt status is still set and can be checked using the UNDI_Status
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  All UNDIs support fragmented frames, now all network devices or protocols do.  If a fragmented
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  frame CPB is given to UNDI and the network device does not support fragmented frames
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  (see !PXE.Implementation flag), the UNDI will have to copy the fragments into a local buffer
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Transmit (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_Receive (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  This is the main SW UNDI API entry using the newer nii protocol.
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_APIEntry_new (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  AdapterInfo               = &(UNDI32DeviceList[CdbPtr->IFnum]->NicInfo);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  UNDI_APIEntry_Common (cdb);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:                               the UNDI driver is layering on..
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:UNDI_APIEntry_Common (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  UNDI_CALL_TABLE   *tab_ptr;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  AdapterInfo = &(UNDI32DeviceList[CdbPtr->IFnum]->NicInfo);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  // check if UNDI_State is valid for this call
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  this UNDI is supporting and removes the NIC_DATA_POINTER from the array.
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  Otherwise, it increments the number of NICs this UNDI is supported and
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  IN PXE_SW_UNDI        *PxePtr
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  @param  PxePtr               Pointer to SW_UNDI data structure.
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  IN PXE_SW_UNDI *PxePtr
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  PxePtr->Len       = (UINT8) sizeof (PXE_SW_UNDI);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Decode.c:  PxePtr->EntryPoint  = (UINT64) (UINTN) UNDI_APIEntry_new;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/UndiAipImpl.c:  EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT_GUID
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/UndiAipImpl.c:  UNDI32_DEV                            *UNDI32Device;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/UndiAipImpl.c:  EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT    *UndiIpv6Support;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/UndiAipImpl.c:  UNDI32Device = UNDI_DEV_FROM_AIP (This);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/UndiAipImpl.c:  *InformationBlockSize = sizeof (EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/UndiAipImpl.c:  UndiIpv6Support = (EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT *) (*InformationBlock);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/UndiAipImpl.c:  UndiIpv6Support->Ipv6Support = UNDI32Device->NIIProtocol_31.Ipv6Supported;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.h:  UINT8 VersionFlag;  // UNDI30 or UNDI31??
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/ComponentName.c:    UEFI Component Name(2) protocol implementation for EFI UNDI32 driver.
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/ComponentName.c:    L"UNDI32 Driver"
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/ComponentName.c:    L"UNDI32 Controller"
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:  EFI internal structures for the EFI UNDI driver.
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:#ifndef _UNDI_32_H_
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:#define _UNDI_32_H_
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:// UNDI_CALL_TABLE.state can have the following values
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:#define UNDI_DEV_SIGNATURE   SIGNATURE_32('u','n','d','i')
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:#define UNDI_DEV_FROM_THIS(a) CR(a, UNDI32_DEV, NIIProtocol_31, UNDI_DEV_SIGNATURE)
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:#define UNDI_DEV_FROM_NIC(a) CR(a, UNDI32_DEV, NicInfo, UNDI_DEV_SIGNATURE)
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:#define UNDI_DEV_FROM_AIP(a) CR(a, UNDI32_DEV, Aip, UNDI_DEV_SIGNATURE)
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:} UNDI32_DEV;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:} UNDI_CALL_TABLE;
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:extern UNDI_CALL_TABLE  api_table[];
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:extern PXE_SW_UNDI      *pxe_31;  // !pxe structure for 3.1 drivers
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:extern UNDI32_DEV       *UNDI32DeviceList[MAX_NIC_INTERFACES];
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:InitializeUNDIDriver (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_notify_virtual (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_GetState (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Start (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Stop (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_GetInitInfo (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_GetConfigInfo (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Initialize (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Reset (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Shutdown (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Interrupt (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_RecFilter (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_StnAddr (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Statistics (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_ip2mac (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_NVData (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Status (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_FillHeader (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Transmit (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:UNDI_Receive (
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:VOID UNDI_APIEntry_new(UINT64);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:VOID UNDI_APIEntry_Common(UINT64);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:VOID PxeStructInit (PXE_SW_UNDI *PxePtr);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/Undi32.h:VOID PxeUpdate (NIC_DATA_INSTANCE *NicPtr, PXE_SW_UNDI *PxePtr);
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:  Since UNDI3.0 uses the TmpMemIo function (instead of the callback routine)
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:  which also takes the UniqueId parameter (as in UNDI3.1 spec) we don't have
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:  Since UNDI3.0 uses the TmpMemIo function (instead of the callback routine)
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:  which also takes the UniqueId parameter (as in UNDI3.1 spec) we don't have
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:  Since UNDI3.0 uses the TmpMemIo function (instead of the callback routine)
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:  which also takes the UniqueId parameter (as in UNDI3.1 spec) we don't have
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:  Since UNDI3.0 uses the TmpMemIo function (instead of the callback routine)
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:  which also takes the UniqueId parameter (as in UNDI3.1 spec) we don't have
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:  Since UNDI3.0 uses the TmpMemIo function (instead of the callback routine)
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:  which also takes the UniqueId parameter (as in UNDI3.1 spec) we don't have
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:  Since UNDI3.0 uses the TmpMemIo function (instead of the callback routine)
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:  which also takes the UniqueId parameter (as in UNDI3.1 spec) we don't have
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:      // this UNDI cannot handle addresses beyond 4 GB without a map routine
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:                                          information which the UNDI driver is
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/UndiRuntimeDxe/E100b.c:  // Convert NIC statistics counter format to EFI/UNDI
UDK-uefi-development-kit/MyWorkSpace/OptionRomPkg/Bus/Usb/UsbNetworking/Ax88772b/SimpleNetwork.c:  // check if we are asked to enable or disable something that the UNDI
UDK-uefi-development-kit/MyWorkSpace/StdLib/LibC/Softfloat/timesoftfloat.c:    NUM_ROUNDINGMODES
UDK-uefi-development-kit/MyWorkSpace/StdLib/LibC/Softfloat/timesoftfloat.c:    TININESS_BEFORE_ROUNDING = 1,
UDK-uefi-development-kit/MyWorkSpace/StdLib/LibC/Softfloat/timesoftfloat.c:    TININESS_AFTER_ROUNDING,
UDK-uefi-development-kit/MyWorkSpace/StdLib/LibC/Softfloat/timesoftfloat.c:     case TININESS_BEFORE_ROUNDING:
UDK-uefi-development-kit/MyWorkSpace/StdLib/LibC/Softfloat/timesoftfloat.c:     case TININESS_AFTER_ROUNDING:
UDK-uefi-development-kit/MyWorkSpace/StdLib/LibC/Softfloat/timesoftfloat.c:              roundingMode < NUM_ROUNDINGMODES;
UDK-uefi-development-kit/MyWorkSpace/StdLib/LibC/Softfloat/timesoftfloat.c:            tininessMode = TININESS_BEFORE_ROUNDING;
UDK-uefi-development-kit/MyWorkSpace/StdLib/LibC/Softfloat/timesoftfloat.c:            tininessMode = TININESS_AFTER_ROUNDING;
UDK-uefi-development-kit/MyWorkSpace/ShellPkg/Library/UefiHandleParsingLib/UefiHandleParsingLib.c:          TempStr = HiiGetString (mHandleParsingHiiHandle, STRING_TOKEN(STR_UNDI_IPV6_INFO), NULL);
UDK-uefi-development-kit/MyWorkSpace/ShellPkg/Library/UefiHandleParsingLib/UefiHandleParsingLib.c:                         ((EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT *)InformationBlock)->Ipv6Support
UDK-uefi-development-kit/MyWorkSpace/ShellPkg/Library/UefiHandleParsingLib/UefiHandleParsingLib.uni:#string STR_UNDI_IPV6_INFO                #language en-US "    UNDI IPv6 Supported: %%H%d%%N \r\n"
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/IndustryStandard/Dhcp.h:#define DHCP4_TAG_UNDI               94   /// Client Network Interface Identifier, RFC 4578
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/IndustryStandard/Dhcp.h:#define DHCP6_OPT_UNDI              62   /// Assigned by IANA, RFC 5970
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Library/DebugLib.h:#define DEBUG_UNDI      0x00010000  // UNDI Driver
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Library/DebugLib.h:#define EFI_D_UNDI      DEBUG_UNDI
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Protocol/WiFi2.h:  // the connection establishment procedure is terminated by the UNDI driver.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Protocol/NetworkInterfaceIdentifier.h:                        ///< option 60 in DHCP. For a Type of EfiNetworkInterfaceUndi, this field is UNDI.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Protocol/NetworkInterfaceIdentifier.h:typedef struct undiconfig_table  UNDI_CONFIG_TABLE;
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Protocol/NetworkInterfaceIdentifier.h:/// The format of the configuration table for UNDI
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Protocol/NetworkInterfaceIdentifier.h:                                            ///< that this UNDI controls.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Protocol/NetworkInterfaceIdentifier.h:  UNDI_CONFIG_TABLE  *nextlink;             ///< A pointer to the next UNDI
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Protocol/Supplicant.h:  // Supported hardware encryption types provided by wireless UNDI driver. The
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Protocol/PxeBaseCode.h:#define EFI_PXE_BASE_CODE_BOOT_TYPE_DOSUNDI           3
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Protocol/AdapterInformation.h:#define EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT_GUID \
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Protocol/AdapterInformation.h:/// EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Protocol/AdapterInformation.h:  /// Returns capability of UNDI to support IPv6 traffic.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Protocol/AdapterInformation.h:} EFI_ADAPTER_INFO_UNDI_IPV6_SUPPORT;
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI ROM ID and devive ID signature.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// Return UNDI operational state.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// Change UNDI operational state from Stopped to Started.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// Change UNDI operational state from Started to Stopped.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// Get UNDI initialization information.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// Changed UNDI operational state from Started to Initialized.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// Change the UNDI operational state from Initialized to Started.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// Last valid PXE UNDI OpCode number.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:// UNDI Get State
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:// UNDI Start
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:// UNDI Stop
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:// UNDI Get Init Info
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:// UNDI Get Config Info
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Initialize
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Reset
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Shutdown.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Interrupt Enables.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Receive Filters.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Station Address.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Statistics.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI MCast IP to MAC.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI NvData.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Get Status.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// NICs and UNDIs may transmit multiple buffers per interrupt.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Fill Header.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Transmit.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// S/W UNDI only.  Return after the packet has been transmitted.  A
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:#define PXE_OPFLAGS_SWUNDI_TRANSMIT_OPMASK  0x0001
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Receive.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// implemented by all UNDIs.  COMMAND_QUEUED is only needed by UNDIs
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Get State.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Start.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Get Init Info.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Initialize.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Reset.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Shutdown.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Interrupt Enables.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Receive Filters.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Station Address.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Statistics.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h://// UNDI MCast IP to MAC.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI NvData.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Get Status.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Fill Header.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Transmit.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI Receive
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// Common StatCodes returned by all UNDI commands, UNDI protocol functions
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:#define PXE_STATCODE_INVALID_UNDI         0x000F
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// This interface number must be passed to the S/W UNDI Start command.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// This interface number is returned by the S/W UNDI Get State and
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// Setting this flag directs the UNDI to queue this command for later
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// execution if the UNDI is busy and it supports command queuing.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// These two bit values are used to determine if there are more UNDI
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  PXE_UINT8   Len;            ///< sizeof(PXE_HW_UNDI).
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:} PXE_HW_UNDI;
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI operation state.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// If set, CDB identified in CDBaddr port is given to UNDI.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  PXE_UINT8   Len;            ///< sizeof(PXE_SW_UNDI).
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:} PXE_SW_UNDI;
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  PXE_HW_UNDI hw;
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  PXE_SW_UNDI sw;
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:} PXE_UNDI;
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:/// UNDI command interface revision.  These are the values that get sent
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:#define PXE_ROMID_IMP_HW_UNDI                             0x80000000
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:    /// See S/W UNDI ROMID structure definition for PCI and
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will never request a delay smaller than 10 microseconds
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// microseconds before returning control to the UNDI.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI may need to block multi-threaded/multi-processor access to
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// device.  To this end, a blocking service is needed by the UNDI.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// When UNDI needs a block, it will call Block() passing a non-zero
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// value.  When UNDI no longer needs a block, it will call Block()
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// do not return control to the UNDI until the previous Block() is
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will pass the virtual address of a buffer and the virtual
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will read or write the device io space using this call back
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will never request a delay smaller than 10 microseconds
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// microseconds before returning control to the UNDI.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI may need to block multi-threaded/multi-processor access to
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// device.  To this end, a blocking service is needed by the UNDI.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// When UNDI needs a block, it will call Block() passing a non-zero
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// value.  When UNDI no longer needs a block, it will call Block()
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// do not return control to the UNDI until the previous Block() is
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will pass the virtual address of a buffer and the virtual
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will read or write the device io space using this call back
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will pass the virtual address of a buffer, direction of the data
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will pass the virtual and mapped addresses of a buffer.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI will pass the virtual and mapped addresses of a buffer.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// protocol driver can provide anything for this Unique_ID, UNDI remembers
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// the Initialize command. Giving UNDI more memory will generally
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// If MemoryRequired is zero, the UNDI does not need and will not
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// this UNDI.  This information is needed when allocating receive
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// be allocated by the UNDI.  If MemoryRequired is non-zero, this
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// This identifies the PCI network device that this UNDI interface.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// This identifies the PCC network device that this UNDI interface
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// be in contiguous physical memory and cannot be swapped out.  The UNDI
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// default link speed (operation depends on UNDI/NIC functionality).
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// If these fields are set to zero, the UNDI will allocate buffer
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// the UNDI and network device do not use external memory buffers.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// Memory used by the UNDI and network device is allocated from the
UDK-uefi-development-kit/MyWorkSpace/MdePkg/Include/Uefi/UefiPxe.h:  /// UNDI/NIC.
UDK-uefi-development-kit/MyWorkSpace/MdePkg/MdePkg.uni:                                                                                   "BIT16 - UNDI Driver message.<BR>\n"
UDK-uefi-development-kit/MyWorkSpace/MdePkg/MdePkg.uni:                                                                                   "BIT16 - UNDI Driver message.<BR>\n"
UDK-uefi-development-kit/MyWorkSpace/MdePkg/MdePkg.dec:  #  BIT16 - UNDI Driver message.<BR>
UDK-uefi-development-kit/MyWorkSpace/MdePkg/MdePkg.dec:  #  BIT16 - UNDI Driver message.<BR>
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_GET_INFORMATION_T              GetInformation;         ///< Data from GET INFORMATION
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_GET_NIC_TYPE_T                 GetNicType;             ///< Data from GET NIC TYPE
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_GET_NDIS_INFO_T                GetNdisInfo;            ///< Data from GET NDIS INFO
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_ISR_T                          Isr;                    ///< Data from ISR
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_TBD_T                          *Xmit;                  //
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Call 16 bit UNDI ROM to stop the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  START UNDI
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_START_UNDI (0000h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_START_UNDI_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Description: This service is used to pass the BIOS parameter registers to the UNDI driver. The UNDI driver is
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Note: This API service must be called only once during UNDI Option ROM boot.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  The UNDI driver is responsible for saving this information and using it every time
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_STARTUP is called.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_START_UNDI_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_START_UNDI_T               *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI STARTUP    
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_STARTUP (0001h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_STARTUP_T parameter structure that has been initialized by the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Description: This API is responsible for initializing the contents of the UNDI code & data segment for proper
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  operation. Information from the !PXE structure and the first PXENV_START_UNDI API call is used
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  to complete this initialization. The rest of the UNDI APIs will not be available until this call has
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Note: PXENV_UNDI_STARTUP must not be called again without first calling
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_SHUTDOWN.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_STARTUP and PXENV_UNDI_SHUTDOWN are no longer responsible for
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  chaining interrupt 1Ah. This must be done by the PXENV_START_UNDI and
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_STOP_UNDI API calls.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_STARTUP_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_STARTUP_T             *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI CLEANUP
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_CLEANUP (0002h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_CLEANUP_T parameter structure.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_CLEANUP_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_CLEANUP_T             *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI INITIALIZE
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_INITIALIZE (0003h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_INITIALIZE_T parameter structure that has been initialized by the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  are those supplied to the most recent UNDI_STARTUP call. This routine does not enable the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  application must call PXENV_UNDI_OPEN to logically connect the network adapter to the network.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_INITIALIZE_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_INITIALIZE_T          *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI RESET ADAPTER
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_RESET_ADAPTER (0004h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_RESET_ADAPTER_t parameter structure that has been initialized
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:    PXENV_UNDI_MCAST_ADDRESS_t    R_Mcast_Buf;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_RESET_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_MCAST_ADDRESS_t;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_RESET_T               *PxeUndiTable,
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI SHUTDOWN
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_SHUTDOWN (0005h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_SHUTDOWN_T parameter.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Note: The contents of the PXENV_UNDI_STARTUP parameter structure need to be saved by the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Universal NIC Driver in case PXENV_UNDI_INITIALIZE is called again.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_SHUTDOWN_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_SHUTDOWN_T            *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI OPEN
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_OPEN (0006h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_OPEN_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:    PXENV_UNDI_MCAST_ADDRESS_t R_Mcast_Buf;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_OPEN_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  R_Mcast_Buf: See definition in UNDI RESET ADAPTER (0004h).
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_OPEN_T                *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI CLOSE
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_CLOSE (0007h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_CLOSE_T parameter.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_CLOSE_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_CLOSE_T               *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI TRANSMIT PACKET
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_TRANSMIT (0008h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_TRANSMIT_T parameter structure that
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  code of PXE_UNDI_STATUS__OUT OF_RESOURCE. The number of buffers is
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  transmission of one or more packets. A call to PXENV_UNDI_TRANSMIT is
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } t_PXENV_UNDI_TRANSMIT;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_TBD_T
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Protocol: This is the protocol of the upper layer that is calling UNDI
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_TRANSMIT_T            *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI SET MULTICAST ADDRESS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_SET_MCAST_ADDRESS (0009h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:    PXENV_UNDI_MCAST_ADDRESS_t R_Mcast_Buf;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_SET_MCAST_ADDR_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  R_Mcast_Buf: See description in the UNDI RESET ADAPTER
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_SET_MCAST_ADDR_T      *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI SET STATION ADDRESS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_SET_STATION_ADDRESS (000Ah)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_SET_STATION_ADDRESS_t parameter structure that has been
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_SET_STATION_ADDR_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_SET_STATION_ADDR_T    *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI SET PACKET FILTER
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_SET_PACKET_FILTER (000Bh)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_SET_PACKET_FILTER_T parameter structure that has been
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_SET_PACKET_FILTER_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Filter: See the receive filter values in the UNDI OPEN
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_SET_PACKET_FILTER_T   *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI GET INFORMATION
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_GET_INFORMATION (000Ch)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_GET_INFORMATION_T parameter structure that has been
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Note: The PermNodeAddress field must be valid after PXENV_START_UNDI and
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_STARTUP have been issued. All other fields must be valid after
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_START_UNDI, PXENV_UNDI_STARTUP and PXENV_UNDI_INITIALIZE have been
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_GET_INFORMATION_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_GET_INFORMATION_T     *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI GET STATISTICS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_GET_STATISTICS (000Dh)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_GET_STATISTICS_T parameter structure that has been initialized
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_GET_STATISTICS_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_GET_STATISTICS_T      *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI CLEAR STATISTICS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_CLEAR_STATISTICS (000Eh)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_CLEAR_STATISTICS_T parameter.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_CLEAR_STATISTICS_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_CLEAR_STATISTICS_T    *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI INITIATE DIAGS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_INITIATE_DIAGS (000Fh)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_INITIATE_DIAGS_T parameter.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_INITIATE_DIAGS_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_INITIATE_DIAGS_T      *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI FORCE INTERRUPT
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_FORCE_INTERRUPT (0010h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_FORCE_INTERRUPT_T parameter structure that has been
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  copy the packet, it can call the PXENV_UNDI_FORCE_INTERRUPT routine to simulate the receive
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_FORCE_INTERRUPT_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_FORCE_INTERRUPT_T     *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI GET MULTICAST ADDRESS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_GET_MCAST_ADDRESS (0011h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_GET_MCAST_ADDR_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_GET_MCAST_ADDR_T      *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI GET NIC TYPE
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_GET_NIC_TYPE (0012h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_GET_NIC_TYPE_T parameter structure that has been initialized by
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  the UNDI is supported before making this call. If the UNDI is not supported, the NIC-specific
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_START_UNDI, PXENV_UNDI_STARTUP and PXENV_UNDI_INITIALIZE must be called
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_GET_NIC_TYPE_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_GET_NIC_TYPE_T        *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI GET IFACE INFO
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_GET_IFACE_INFO (0013h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_GET_IFACE_INFO_t parameter structure that has been initialized
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Note: UNDI follows the NDIS2 specification in giving this information. It is the responsibility of the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_START_UNDI, PXENV_UNDI_STARTUP and PXENV_UNDI_INITIALIZE must be called
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_GET_NDIS_INFO_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_GET_NDIS_INFO_T       *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI ISR
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_ISR (0014h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_ISR_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  In this design the UNDI does not hook the interrupt for the Network Interface. Instead, the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  application or the protocol driver hooks the interrupt and calls UNDI with the PXENV_UNDI_ISR
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  API call for interrupt verification (PXENV_UNDI_ISR_IN_START) and processing
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  (PXENV_UNDI_ISR_IN_PROCESS and PXENV_UNDI_ISR_GET_NEXT).
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  calls the UNDI using the PXENV_UNDI_ISR API with the value PXENV_UNDI_ISR_IN_START for
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  the FuncFlag parameter. At this time UNDI must disable the interrupts at the Network Interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  level and read any status values required to further process the interrupt. UNDI must return as
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  quickly as possible with one of the two values, PXENV_UNDI_ISR_OUT_OURS or
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_ISR_OUT_NOT_OURS, for the parameter FuncFlag depending on whether the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  If the value returned in FuncFlag is PXENV_UNDI_ISR_OUT_NOT_OURS, then the interrupt was
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  If the value returned in FuncFlag is PXENV_UNDI_ISR_OUT_OURS, the protocol driver must start
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  The protocol driver strategy routine will call UNDI using this same API with FuncFlag equal to
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_ISR_IN_PROCESS. At this time UNDI must find the cause of this interrupt and
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  The protocol driver calls UNDI repeatedly with the FuncFlag equal to
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  PXENV_UNDI_ISR_IN_GET_NEXT to get all the buffers in a frame and also all the received
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  frames in the queue. On this call, UNDI must remember the previous buffer given to the protoco,l
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  If there is no received frame pending to be processed, UNDI processes the transmit completes and
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  if there is no other interrupt status to be processed, UNDI re-enables the interrupt at the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  NETWORK INTERFACE level and returns PXENV_UNDI_ISR_OUT_DONE in the FuncFlag.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  strategy routine when the UNDI re-enables interrupts.   
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_ISR_T                 *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  STOP UNDI
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_STOP_UNDI (0015h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_STOP_UNDI_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Note: This API service must be called only once at the end of UNDI Option ROM boot. One of the valid
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  status codes is PXENV_STATUS_KEEP. If this status is returned, UNDI must not be removed from
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  base memory. Also, UNDI must not be removed from base memory if BC is not removed from base
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_STOP_UNDI_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_STOP_UNDI_T                *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI GET STATE
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_GET_STATE (0015h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a PXENV_UNDI_GET_STATE_T parameter.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  constants. The UNDI_STATE field in the parameter structure must be set to one of the valid state
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Description: This call can be used to obtain state of the UNDI engine in order to avoid issuing adverse call
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:    #define PXE_UNDI_GET_STATE_STARTED 1
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:    #define PXE_UNDI_GET_STATE_INITIALIZED 2
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:    #define PXE_UNDI_GET_STATE_OPENED 3
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:    UINT8 UNDIstate;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  } PXENV_UNDI_GET_STATE_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Note. UNDI implementation is responsible for maintaining
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  UNDI ISR
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Op-Code: PXENV_UNDI_ISR (0014h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  Input: Far pointer to a t_PXENV_UNDI_ISR parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.h:  IN OUT PXENV_UNDI_GET_STATE_T           *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  UINT16  PxeRomIdOffset;     ///< offset of UNDI, $BC$, or BUSD ROM ID structure
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  UNDI_LOADER_T *DisplayPointer;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DisplayPointer = (UNDI_LOADER_T *) UndiLoaderStructure;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DEBUG ((DEBUG_NET, "\tUNDI_DS= 0x%X\n\r", DisplayPointer->Undi_Ds));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DEBUG ((DEBUG_NET, "\tUNDI_CS= 0x%X\n\r", DisplayPointer->Undi_Cs));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  the "Early UNDI" trick.  Herein, the UNDI layer can be loaded in the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  UNDI_ROMID_T  *DisplayPointer;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DisplayPointer = (UNDI_ROMID_T *) RomIDStructure;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    DisplayPointer->UNDI_Rev[0],
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    DisplayPointer->UNDI_Rev[1],
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    DisplayPointer->UNDI_Rev[2])
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "Offset of UNDI loader routine in the option ROM image= 0x%X\n\r",
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    DisplayPointer->UNDI_Loader)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DEBUG ((DEBUG_NET, "From the data above, the absolute entry point of the UNDI loader is\n\r"));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT32) (DisplayPointer->UNDI_Loader + ((UINT32) (UINTN)(DisplayPointer - 0x20) & 0xFFFF0)))
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "needed to load and run the UNDI= 0x%X \n\r",
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "UNDI runtime code and data = 0x%X\n\r",
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "Far pointer to UNDI ROMID = 0x%X\n\r",
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "The UNDIData is \n\r\tSegment Addr = 0x%X\n\r\tPhysical Addr = 0x%X\n\r\tSeg Size = 0x%X\n\r",
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT16) DisplayPointer->UNDIData.Seg_Addr,
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT32) DisplayPointer->UNDIData.Phy_Addr,
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT16) DisplayPointer->UNDIData.Seg_Size)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "The UNDICodeWrite is \n\r\tSegment Addr = 0x%X\n\r\tPhysical Addr = 0x%X\n\r\tSeg Size = 0x%X\n\r",
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT16) DisplayPointer->UNDICode.Seg_Addr,
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT32) DisplayPointer->UNDICode.Phy_Addr,
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT16) DisplayPointer->UNDICode.Seg_Size)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT16) DisplayPointer->UNDICodeWrite.Seg_Addr,
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT32) DisplayPointer->UNDICodeWrite.Phy_Addr,
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    (UINT16) DisplayPointer->UNDICodeWrite.Seg_Size)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "UNDI code segment size in bytes = 0x%X\n\r",
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    DisplayPointer->UNDICodeSize)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  UNDI_ROMID_T          *RomIdTableAddress;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  UNDI_LOADER_T         *UndiLoaderTable;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DEBUG ((DEBUG_NET, "\n\r\n\rCheck for the UNDI ROMID Signature\n\r"));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  RomIdTableAddress = (UNDI_ROMID_T *) (RomAddress + OPTION_ROM_PTR->PxeRomIdOffset);
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // see if this is a header for an UNDI ROM ID structure (vs. a $BC$ or BUSD type)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  if (CompareMem (RomIdTableAddress->Signature, UNDI_ROMID_SIG, sizeof RomIdTableAddress->Signature) != 0) {
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "With an UNDI Loader located at 0x%X\n\r",
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    RomAddress + RomIdTableAddress->UNDI_Loader)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // found an UNDI ROM ID structure
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  SimpleNetworkDevice->Nii.MajorVer   = RomIdTableAddress->UNDI_Rev[2];
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  SimpleNetworkDevice->Nii.MinorVer   = RomIdTableAddress->UNDI_Rev[1];
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DEBUG ((DEBUG_NET, "Allocate area for the UNDI_LOADER_T structure\n\r"));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  SimpleNetworkDevice->UndiLoaderTablePages = EFI_SIZE_TO_PAGES (PARAGRAPH_SIZE + sizeof (UNDI_LOADER_T));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // Allocate memory for the Deployed UNDI.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // The UNDI is essentially telling us how much space it needs, and
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // Allocate memory for the Deployed UNDI stack
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // The UNDI is essentially telling us how much space it needs, and
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // Allocate memory for the Deployed UNDI.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // The UNDI is essentially telling us how much space it needs, and
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // these are in the Input and Output Parameter to be sent to the UNDI Loader code
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // UndiLoaderTable->_AX is AX value when UNDI ROM is initialized by BIOS, it is the PCI bus device
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "The Linear Address of the UNDI Loader entry is 0x%X\n",
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    RomAddress + RomIdTableAddress->UNDI_Loader)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    "The Address offset of the UNDI Loader entry is 0x%X\n",
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    RomIdTableAddress->UNDI_Loader)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // make the call into the UNDI Code
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DEBUG ((DEBUG_INIT, "Make the call into the UNDI code now\n\r"));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    Segment * 0x10 + RomIdTableAddress->UNDI_Loader,
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:    RomIdTableAddress->UNDI_Loader)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:                                                   (UINT16) RomIdTableAddress->UNDI_Loader,  // Offset
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  DEBUG ((DEBUG_NET, "Now returned from the UNDI code\n\r"));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // The PXE UNDI can only grab this table when it's below one-MB, and
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // For PXE UNDI call, AX contains the return status.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Misc.c:  // Convert the PXE UNDI Status to EFI_STATUS type
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Start the UNDI interface.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval EFI_DEVICE_ERROR Fail to start 16 bit UNDI ROM. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval Others           Status of start 16 bit UNDI ROM. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Start the UNDI interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval EFI_DEVICE_ERROR Fail to start 16 bit UNDI ROM. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval Others           Status of start 16 bit UNDI ROM. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Stop the UNDI interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval EFI_DEVICE_ERROR Fail to stop 16 bit UNDI ROM. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval Others           Status of stop 16 bit UNDI ROM. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Clean up any Real-mode UNDI residue from the system 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Unload 16 bit UNDI Option ROM from memory
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  CopyMem (&SimpleNetworkDevice->Nii.StringId, "UNDI", 4);
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Load 16 bit UNDI Option ROM into Memory
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    DEBUG ((DEBUG_NET, "ERROR : Could not load UNDI.  Status = %r\n", Status));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call PXENV_START_UNDI - Initilizes the UNID interface for use.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:             sizeof (PXENV_UNDI_TBD_T) / EFI_PAGE_SIZE + 1,
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  DEBUG ((DEBUG_INIT, "UNDI16 Driver : EFI_SUCCESS\n"));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:               sizeof (PXENV_UNDI_TBD_T) / EFI_PAGE_SIZE + 1
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:                 sizeof (PXENV_UNDI_TBD_T) / EFI_PAGE_SIZE + 1
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  IN OUT PXENV_UNDI_MCAST_ADDR_T  *McastBuffer,
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:// Load 16 bit UNDI Option ROM into memory
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Unload 16 bit UNDI Option ROM from memory
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Start the UNDI interface.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval EFI_DEVICE_ERROR Fail to start 16 bit UNDI ROM. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval Others           Status of start 16 bit UNDI ROM. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_START_UNDI_T  Start;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Stop the UNDI interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval EFI_DEVICE_ERROR Fail to stop 16 bit UNDI ROM. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval Others           Status of stop 16 bit UNDI ROM. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_STOP_UNDI_T Stop;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval EFI_DEVICE_ERROR Fail to cleanup 16 bit UNDI ROM. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  @retval Others           Status of cleanup 16 bit UNDI ROM. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_CLEANUP_T  Cleanup;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to cleanup the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  ZeroMem (&SimpleNetworkDevice->GetInformation, sizeof (PXENV_UNDI_GET_INFORMATION_T));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  ZeroMem (&SimpleNetworkDevice->GetNicType, sizeof (PXENV_UNDI_GET_NIC_TYPE_T));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  ZeroMem (&SimpleNetworkDevice->GetNdisInfo, sizeof (PXENV_UNDI_GET_NDIS_INFO_T));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    ZeroMem (&SimpleNetworkDevice->Isr, sizeof (PXENV_UNDI_ISR_T));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    SimpleNetworkDevice->Isr.FuncFlag = PXENV_UNDI_ISR_IN_START;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // There have been no events on this UNDI interface, so return EFI_NOT_READY
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    if (SimpleNetworkDevice->Isr.FuncFlag == PXENV_UNDI_ISR_OUT_NOT_OURS) {
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    ZeroMem (&SimpleNetworkDevice->Isr, sizeof (PXENV_UNDI_ISR_T));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    SimpleNetworkDevice->Isr.FuncFlag = PXENV_UNDI_ISR_IN_PROCESS;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call UNDI GET_NEXT until DONE
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  while (SimpleNetworkDevice->Isr.FuncFlag != PXENV_UNDI_ISR_OUT_DONE) {
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // UNDI is busy.  Caller will have to call again.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    if (SimpleNetworkDevice->Isr.FuncFlag == PXENV_UNDI_ISR_OUT_BUSY) {
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Check for invalud UNDI FuncFlag
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    if (SimpleNetworkDevice->Isr.FuncFlag != PXENV_UNDI_ISR_OUT_RECEIVE &&
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:        SimpleNetworkDevice->Isr.FuncFlag != PXENV_UNDI_ISR_OUT_TRANSMIT
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    if (SimpleNetworkDevice->Isr.FuncFlag == PXENV_UNDI_ISR_OUT_TRANSMIT) {
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    else if (SimpleNetworkDevice->Isr.FuncFlag == PXENV_UNDI_ISR_OUT_RECEIVE) {
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    ZeroMem (&SimpleNetworkDevice->Isr, sizeof (PXENV_UNDI_ISR_T));
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    SimpleNetworkDevice->Isr.FuncFlag = PXENV_UNDI_ISR_IN_GET_NEXT;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:// Simple Network Protocol Interface Functions using 16 bit UNDI Option ROMs
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_STARTUP_T    Startup;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // The UNDI interface has been started, so update the State.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Call 16 bit UNDI ROM to stop the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_INITIALIZE_T Initialize;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_OPEN_T       Open;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    if (Initialize.Status == PXENV_STATUS_UNDI_MEDIATEST_FAILED) {
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // The UNDI interface has been initialized, so update the State.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_RESET_T      Reset;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_CLOSE_T      Close;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_SHUTDOWN_T   Shutdown;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to start the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // The UNDI interface has been initialized, so update the State.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // a shutdown will cause some versions of UNDI-16 to stop operating.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_CLOSE_T      Close;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_OPEN_T       Open;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to close the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Copy the MAC addresses into the UNDI open parameter structure
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_SET_STATION_ADDR_T SetStationAddr;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_CLOSE_T            Close;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_OPEN_T             Open;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to stop the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16-bit UNDI ROM to set the station address
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16-bit UNDI ROM to start the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_CLEAR_STATISTICS_T ClearStatistics;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_GET_STATISTICS_T   GetStatistics;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:    // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_GET_MCAST_ADDR_T GetMcastAddr;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // 16 bit UNDI Option ROMS do not support IPv6.  Check for IPv6 usage.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Call 16 bit UNDI ROM to open the network interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  PXENV_UNDI_TRANSMIT_T   XmitInfo;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Initialize UNDI WRITE parameter structure.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Make API call to UNDI TRANSMIT
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  // Check the status code from the 16 bit UNDI ROM
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  Clean up any Real-mode UNDI residue from the system 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/BiosSnp16.c:  //        would be to perform an UNDI STOP command.  This strategam has been attempted
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/ComponentName.c:    L"BIOS[UNDI] Simple Network Protocol Driver"
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  START UNDI
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_START_UNDI (0000h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_START_UNDI_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Description: This service is used to pass the BIOS parameter registers to the UNDI driver. The UNDI driver is
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Note: This API service must be called only once during UNDI Option ROM boot.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  The UNDI driver is responsible for saving this information and using it every time
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_STARTUP is called.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_START_UNDI_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_START_UNDI_T      *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_START_UNDI_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_START_UNDI
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI STARTUP    
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_STARTUP (0001h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_STARTUP_T parameter structure that has been initialized by the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Description: This API is responsible for initializing the contents of the UNDI code & data segment for proper
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  operation. Information from the !PXE structure and the first PXENV_START_UNDI API call is used
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  to complete this initialization. The rest of the UNDI APIs will not be available until this call has
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Note: PXENV_UNDI_STARTUP must not be called again without first calling
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_SHUTDOWN.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_STARTUP and PXENV_UNDI_SHUTDOWN are no longer responsible for
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  chaining interrupt 1Ah. This must be done by the PXENV_START_UNDI and
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_STOP_UNDI API calls.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_STARTUP_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_STARTUP_T    *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_STARTUP_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_STARTUP
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI CLEANUP
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_CLEANUP (0002h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_CLEANUP_T parameter structure.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_CLEANUP_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_CLEANUP_T    *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_CLEANUP_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_CLEANUP
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI INITIALIZE
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_INITIALIZE (0003h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_INITIALIZE_T parameter structure that has been initialized by the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  are those supplied to the most recent UNDI_STARTUP call. This routine does not enable the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  application must call PXENV_UNDI_OPEN to logically connect the network adapter to the network.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_INITIALIZE_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_INITIALIZE_T  *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_INITIALIZE_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_INITIALIZE
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI RESET ADAPTER
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_RESET_ADAPTER (0004h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_RESET_ADAPTER_t parameter structure that has been initialized
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    PXENV_UNDI_MCAST_ADDRESS_t    R_Mcast_Buf;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_RESET_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_MCAST_ADDRESS_t;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_RESET_T      *PxeUndiTable,
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_OPEN_T   Open;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_CLOSE_T  Close;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            sizeof (PXENV_UNDI_RESET_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            PXENV_UNDI_RESET_NIC
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            PXENV_UNDI_CLOSE
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            sizeof (PXENV_UNDI_RESET_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            PXENV_UNDI_RESET_NIC
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    sizeof (PXENV_UNDI_MCAST_ADDR_T)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            PXENV_UNDI_OPEN
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI SHUTDOWN
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_SHUTDOWN (0005h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_SHUTDOWN_T parameter.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Note: The contents of the PXENV_UNDI_STARTUP parameter structure need to be saved by the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Universal NIC Driver in case PXENV_UNDI_INITIALIZE is called again.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_SHUTDOWN_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_SHUTDOWN_T   *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_SHUTDOWN_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_SHUTDOWN
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI OPEN
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_OPEN (0006h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_OPEN_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    PXENV_UNDI_MCAST_ADDRESS_t R_Mcast_Buf;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_OPEN_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  R_Mcast_Buf: See definition in UNDI RESET ADAPTER (0004h).
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_OPEN_T       *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_OPEN_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_OPEN
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI CLOSE
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_CLOSE (0007h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_CLOSE_T parameter.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_CLOSE_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_CLOSE_T      *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_CLOSE_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_CLOSE
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI TRANSMIT PACKET
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_TRANSMIT (0008h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_TRANSMIT_T parameter structure that
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  code of PXE_UNDI_STATUS__OUT OF_RESOURCE. The number of buffers is
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  transmission of one or more packets. A call to PXENV_UNDI_TRANSMIT is
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } t_PXENV_UNDI_TRANSMIT;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_TBD_T
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Protocol: This is the protocol of the upper layer that is calling UNDI
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_TRANSMIT_T   *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            sizeof (PXENV_UNDI_TRANSMIT_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:            PXENV_UNDI_TRANSMIT
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI SET MULTICAST ADDRESS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_SET_MCAST_ADDRESS (0009h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    PXENV_UNDI_MCAST_ADDRESS_t R_Mcast_Buf;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_SET_MCAST_ADDR_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  R_Mcast_Buf: See description in the UNDI RESET ADAPTER
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_SET_MCAST_ADDR_T  *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_SET_MCAST_ADDR_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_SET_MCAST_ADDR
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI SET STATION ADDRESS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_SET_STATION_ADDRESS (000Ah)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_SET_STATION_ADDRESS_t parameter structure that has been
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_SET_STATION_ADDR_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_SET_STATION_ADDR_T  *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_SET_STATION_ADDR_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_SET_STATION_ADDR
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI SET PACKET FILTER
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_SET_PACKET_FILTER (000Bh)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_SET_PACKET_FILTER_T parameter structure that has been
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_SET_PACKET_FILTER_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Filter: See the receive filter values in the UNDI OPEN
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_SET_PACKET_FILTER_T  *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_SET_PACKET_FILTER_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_SET_PACKET_FILTER
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI GET INFORMATION
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_GET_INFORMATION (000Ch)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_GET_INFORMATION_T parameter structure that has been
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Note: The PermNodeAddress field must be valid after PXENV_START_UNDI and
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_STARTUP have been issued. All other fields must be valid after
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_START_UNDI, PXENV_UNDI_STARTUP and PXENV_UNDI_INITIALIZE have been
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_GET_INFORMATION_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_GET_INFORMATION_T  *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_GET_INFORMATION_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_GET_INFORMATION
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI GET STATISTICS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_GET_STATISTICS (000Dh)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_GET_STATISTICS_T parameter structure that has been initialized
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_GET_STATISTICS_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_GET_STATISTICS_T  *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_GET_STATISTICS_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_GET_STATISTICS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI CLEAR STATISTICS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_CLEAR_STATISTICS (000Eh)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_CLEAR_STATISTICS_T parameter.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_CLEAR_STATISTICS_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_CLEAR_STATISTICS_T  *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_CLEAR_STATISTICS_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_CLEAR_STATISTICS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI INITIATE DIAGS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_INITIATE_DIAGS (000Fh)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_INITIATE_DIAGS_T parameter.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_INITIATE_DIAGS_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_INITIATE_DIAGS_T  *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_INITIATE_DIAGS_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_INITIATE_DIAGS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI FORCE INTERRUPT
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_FORCE_INTERRUPT (0010h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_FORCE_INTERRUPT_T parameter structure that has been
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  copy the packet, it can call the PXENV_UNDI_FORCE_INTERRUPT routine to simulate the receive
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_FORCE_INTERRUPT_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_FORCE_INTERRUPT_T  *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_FORCE_INTERRUPT_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_FORCE_INTERRUPT
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI GET MULTICAST ADDRESS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_GET_MCAST_ADDRESS (0011h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_GET_MCAST_ADDR_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_GET_MCAST_ADDR_T  *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_GET_MCAST_ADDR_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_GET_MCAST_ADDR
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI GET NIC TYPE
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_GET_NIC_TYPE (0012h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_GET_NIC_TYPE parameter structure that has been initialized by
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  the UNDI is supported before making this call. If the UNDI is not supported, the NIC-specific
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_START_UNDI, PXENV_UNDI_STARTUP and PXENV_UNDI_INITIALIZE must be called
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_GET_NIC_TYPE_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_GET_NIC_TYPE_T  *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_GET_NIC_TYPE_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_GET_NIC_TYPE
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI GET IFACE INFO
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_GET_IFACE_INFO (0013h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_GET_IFACE_INFO_t parameter structure that has been initialized
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Note: UNDI follows the NDIS2 specification in giving this information. It is the responsibility of the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_START_UNDI, PXENV_UNDI_STARTUP and PXENV_UNDI_INITIALIZE must be called
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_GET_NDIS_INFO_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_GET_NDIS_INFO_T  *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_GET_NDIS_INFO_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_GET_NDIS_INFO
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI ISR
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_ISR (0014h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_ISR_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  In this design the UNDI does not hook the interrupt for the Network Interface. Instead, the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  application or the protocol driver hooks the interrupt and calls UNDI with the PXENV_UNDI_ISR
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  API call for interrupt verification (PXENV_UNDI_ISR_IN_START) and processing
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  (PXENV_UNDI_ISR_IN_PROCESS and PXENV_UNDI_ISR_GET_NEXT).
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  calls the UNDI using the PXENV_UNDI_ISR API with the value PXENV_UNDI_ISR_IN_START for
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  the FuncFlag parameter. At this time UNDI must disable the interrupts at the Network Interface
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  level and read any status values required to further process the interrupt. UNDI must return as
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  quickly as possible with one of the two values, PXENV_UNDI_ISR_OUT_OURS or
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_ISR_OUT_NOT_OURS, for the parameter FuncFlag depending on whether the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  If the value returned in FuncFlag is PXENV_UNDI_ISR_OUT_NOT_OURS, then the interrupt was
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  If the value returned in FuncFlag is PXENV_UNDI_ISR_OUT_OURS, the protocol driver must start
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  The protocol driver strategy routine will call UNDI using this same API with FuncFlag equal to
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_ISR_IN_PROCESS. At this time UNDI must find the cause of this interrupt and
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  The protocol driver calls UNDI repeatedly with the FuncFlag equal to
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  PXENV_UNDI_ISR_IN_GET_NEXT to get all the buffers in a frame and also all the received
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  frames in the queue. On this call, UNDI must remember the previous buffer given to the protoco,l
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  If there is no received frame pending to be processed, UNDI processes the transmit completes and
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  if there is no other interrupt status to be processed, UNDI re-enables the interrupt at the
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  NETWORK INTERFACE level and returns PXENV_UNDI_ISR_OUT_DONE in the FuncFlag.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  strategy routine when the UNDI re-enables interrupts.   
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_ISR_T        *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_ISR_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_ISR
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  STOP UNDI
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_STOP_UNDI (0015h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_STOP_UNDI_T parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Note: This API service must be called only once at the end of UNDI Option ROM boot. One of the valid
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  status codes is PXENV_STATUS_KEEP. If this status is returned, UNDI must not be removed from
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  base memory. Also, UNDI must not be removed from base memory if BC is not removed from base
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_STOP_UNDI_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_STOP_UNDI_T       *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_STOP_UNDI_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_STOP_UNDI
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI GET STATE
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_GET_STATE (0015h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a PXENV_UNDI_GET_STATE_T parameter.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  constants. The UNDI_STATE field in the parameter structure must be set to one of the valid state
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Description: This call can be used to obtain state of the UNDI engine in order to avoid issuing adverse call
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    #define PXE_UNDI_GET_STATE_STARTED 1
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    #define PXE_UNDI_GET_STATE_INITIALIZED 2
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    #define PXE_UNDI_GET_STATE_OPENED 3
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:    UINT8 UNDIstate;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  } PXENV_UNDI_GET_STATE_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Note. UNDI implementation is responsible for maintaining
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  UNDI ISR
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Op-Code: PXENV_UNDI_ISR (0014h)
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  Input: Far pointer to a t_PXENV_UNDI_ISR parameter structure that has been initialized by the caller.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:  IN OUT PXENV_UNDI_GET_STATE_T  *PxeUndiTable
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          sizeof (PXENV_UNDI_GET_STATE_T),
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/PxeUndi.c:          PXENV_UNDI_GET_STATE
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define UNDI_ROMID_SIG      "UNDI"
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define UNDI_ROMID_REV      0x00
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define UNDI_ROMID_SIG_PTR  SIGNATURE_32 ('U', 'N', 'D', 'I')
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_KEEP_UNDI        0x04
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:// These errors are for UNDI compatible NIC drivers. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_INVALID_FUNCTION          0x60
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_MEDIATEST_FAILED          0x61
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_CANNOT_INIT_NIC_FOR_MCAST 0x62
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_CANNOT_INITIALIZE_NIC     0x63
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_CANNOT_INITIALIZE_PHY     0x64
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_CANNOT_READ_CONFIG_DATA   0x65
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_CANNOT_READ_INIT_DATA     0x66
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_BAD_MAC_ADDR              0x67
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_BAD_EEPROM_CKSUM          0x68
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_ERROR_SETTING_ISR         0x69
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_INVALID_STATE             0x6A
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_TRANSMIT_ERROR            0x6B
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STATUS_UNDI_INVALID_PARAMETER         0x6C
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT8   UNDI_Rev[3];  ///< API revision number stored in Intel order.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16  UNDI_Loader;  ///< Offset of UNDI loader routine in the option ROM image.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16  StackSize;    ///< Minimum stack segment size, in bytes, needed to load and run the UNDI.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16  DataSize;     ///< UNDI runtime code and data
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} UNDI_ROMID_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  ///   UNDI_ROMID_T __FAR *UNDI;// Far pointer to UNDI ROMID
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  NEWSEGDESC_T  UNDIData;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  NEWSEGDESC_T  UNDICode;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  NEWSEGDESC_T  UNDICodeWrite;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16      UNDIDataSeg;  ///< Real mode UNDI data segment.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16      UNDIDataSize; ///< UNDI data segment size in bytes.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16      UNDICodeSeg;  ///< Real mode UNDI code segment.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16      UNDICodeSize; ///< UNDI code segment size in bytes.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} UNDI_LOADER_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h://  Put in some UNDI-specific arguments
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_START_UNDI              0x0000
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_STARTUP            0x0001
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_CLEANUP            0x0002
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_INITIALIZE         0x0003
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_RESET_NIC          0x0004
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_SHUTDOWN           0x0005
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_OPEN               0x0006
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_CLOSE              0x0007
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_TRANSMIT           0x0008
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_SET_MCAST_ADDR     0x0009
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_SET_STATION_ADDR   0x000A
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_SET_PACKET_FILTER  0x000B
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_GET_INFORMATION    0x000C
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_GET_STATISTICS     0x000D
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_CLEAR_STATISTICS   0x000E
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_INITIATE_DIAGS     0x000F
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_FORCE_INTERRUPT    0x0010
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_GET_MCAST_ADDR     0x0011
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_GET_NIC_TYPE       0x0012
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_GET_NDIS_INFO      0x0013
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR                0x0014
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_STOP_UNDI               0x0015
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_GET_STATE          0x0016
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_MCAST_ADDR_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_START_UNDI_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_STARTUP_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_CLEANUP_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_INITIALIZE_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  IN PXENV_UNDI_MCAST_ADDR_T  R_Mcast_Buf;  ///< multicast address list
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_RESET_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_SHUTDOWN_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  IN PXENV_UNDI_MCAST_ADDR_T  McastBuffer;  /* In: */
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  /* See t_PXENV_UNDI_MCAST_ADDR. */
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_OPEN_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_CLOSE_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:PXENV_UNDI_TBD_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_TRANSMIT_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  IN PXENV_UNDI_MCAST_ADDR_T  McastBuffer;  ///<  In: 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_SET_MCAST_ADDR_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_SET_STATION_ADDR_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:typedef struct s_PXENV_UNDI_SET_PACKET_FILTER {
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_SET_PACKET_FILTER_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_GET_INFORMATION_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_GET_STATISTICS_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_CLEAR_STATISTICS_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_INITIATE_DIAGS_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_FORCE_INTERRUPT_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_GET_MCAST_ADDR_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_GET_NIC_TYPE_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_GET_NDIS_INFO_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  IN OUT UINT16 FuncFlag; ///< In: PXENV_UNDI_ISR_IN_xxx 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  /* Out: PXENV_UNDI_ISR_OUT_xxx */
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_ISR_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_IN_START 1 /* This function must be first */
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_IN_PROCESS 2 /* Call to start processing one of */
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_IN_GET_NEXT  3 /* Call to start/continue receiving */
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:     Possible responses from PXENV_UNDI_ISR_IN_START
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_OUT_OURS 0 ///< This is our interrupt.  Deal  with it. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_OUT_NOT_OURS 1 ///< This is not our interrupt.
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:     Possible responses from PXENV_UNDI_ISR_IN_PROCESS and
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:     PXENV_UNDI_ISR_IN_PROCESS
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_OUT_DONE 0       ///< We are done processing this  interrupt. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_OUT_TRANSMIT 2   ///< We completed a transmit interrupt. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_OUT_RECEIVE  3   ///< Get data from receive buffer. 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_ISR_OUT_BUSY     4 /* ? */
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_STOP_UNDI_T;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_STARTED      1     ///< not even initialized 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_INITIALIZED  2     ///< initialized and closed (not opened) 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:#define PXENV_UNDI_OPENED       3     ///< initialized & opened 
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:  UINT16      UNDI_State;
UDK-uefi-development-kit/MyWorkSpace/IntelFrameworkModulePkg/Csm/BiosThunk/Snp16Dxe/Pxe.h:} PXENV_UNDI_GET_STATE_T;
UDK-uefi-development-kit/MyWorkSpace/Vlv2TbltDevicePkg/PlatformPkgGccX64.dsc:  DEFINE      UNDI_DXE_ARCHITECTURE   = 64
UDK-uefi-development-kit/MyWorkSpace/Vlv2TbltDevicePkg/PlatformPkgGccX64.dsc:  DEFINE      UNDI_DXE_ARCHITECTURE   = 32
UDK-uefi-development-kit/MyWorkSpace/Vlv2TbltDevicePkg/PlatformPkgIA32.dsc:  DEFINE      UNDI_DXE_ARCHITECTURE   = 64
UDK-uefi-development-kit/MyWorkSpace/Vlv2TbltDevicePkg/PlatformPkgIA32.dsc:  DEFINE      UNDI_DXE_ARCHITECTURE   = 32
UDK-uefi-development-kit/MyWorkSpace/Vlv2TbltDevicePkg/PlatformPkg.fdf:    SECTION PE32 = Vlv2MiscBinariesPkg/UNDI/RtkUndiDxe/$(DXE_ARCHITECTURE)/RtkUndiDxe.efi
UDK-uefi-development-kit/MyWorkSpace/Vlv2TbltDevicePkg/PlatformPkg.fdf:    SECTION UI = "UNDI"
UDK-uefi-development-kit/MyWorkSpace/Vlv2TbltDevicePkg/PlatformPkgX64.dsc:  DEFINE      UNDI_DXE_ARCHITECTURE   = 64
UDK-uefi-development-kit/MyWorkSpace/Vlv2TbltDevicePkg/PlatformPkgX64.dsc:  DEFINE      UNDI_DXE_ARCHITECTURE   = 32
UDK-uefi-development-kit/MyWorkSpace/Vlv2TbltDevicePkg/PlatformPkgGcc.fdf:    SECTION PE32 = Vlv2MiscBinariesPkg/UNDI/RtkUndiDxe/$(DXE_ARCHITECTURE)/RtkUndiDxe.efi
UDK-uefi-development-kit/MyWorkSpace/Vlv2TbltDevicePkg/PlatformPkgGcc.fdf:    SECTION UI = "UNDI"
UDK-uefi-development-kit/MyWorkSpace/Vlv2TbltDevicePkg/PciPlatform/BoardPciPlatform.c:#define PXE_UNDI_OPTION_ROM_INTELPXE_GUID \
UDK-uefi-development-kit/MyWorkSpace/OvmfPkg/OvmfPkgIa32X64.dsc:  # DEBUG_UNDI      0x00010000  // UNDI Driver
UDK-uefi-development-kit/MyWorkSpace/OvmfPkg/OvmfPkgIa32.dsc:  # DEBUG_UNDI      0x00010000  // UNDI Driver
UDK-uefi-development-kit/MyWorkSpace/OvmfPkg/OvmfPkgX64.dsc:  # DEBUG_UNDI      0x00010000  // UNDI Driver
UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Acpi/BootScriptExecutorDxe/BootScriptExecutorDxe/OUTPUT/X64/S3Asm.i:} PXE_HW_UNDI;
UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Acpi/BootScriptExecutorDxe/BootScriptExecutorDxe/OUTPUT/X64/S3Asm.i:} PXE_SW_UNDI;
UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Acpi/BootScriptExecutorDxe/BootScriptExecutorDxe/OUTPUT/X64/S3Asm.i:  PXE_HW_UNDI hw;
UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Acpi/BootScriptExecutorDxe/BootScriptExecutorDxe/OUTPUT/X64/S3Asm.i:  PXE_SW_UNDI sw;
UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Acpi/BootScriptExecutorDxe/BootScriptExecutorDxe/OUTPUT/X64/S3Asm.i:} PXE_UNDI;
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/UefiPxeBcDxe/UefiPxeBcDxe/DEBUG/UefiPxe4BcDxe.dll matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/UefiPxeBcDxe/UefiPxeBcDxe/DEBUG/UefiPxe4BcDxe.debug matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/UefiPxeBcDxe/UefiPxeBcDxe/DEBUG/UefiPxe4BcDxe.efi matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/UefiPxeBcDxe/UefiPxeBcDxe/OUTPUT/UefiPxe4BcDxe.lib matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/UefiPxeBcDxe/UefiPxeBcDxe/OUTPUT/UefiPxe4BcDxe.efi matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/UefiPxeBcDxe/UefiPxeBcDxe/OUTPUT/PxeBcDhcp.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/DEBUG/SnpDxe.dll matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/DEBUG/SnpDxe.efi matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/DEBUG/SnpDxe.debug matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Callback.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Nvdata.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Receive_filters.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/SnpDxe.lib matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Stop.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Transmit.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Station_address.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/SnpDxe.efi matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Start.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Reset.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Shutdown.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Statistics.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Mcast_ip_to_mac.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Initialize.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Get_status.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Receive.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/WaitForPacket.obj matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/Network/SnpDxe/SnpDxe/OUTPUT/Snp.obj matches
UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/DebugSupportDxe/DebugSupportDxe/OUTPUT/X64/AsmFuncs.i:} PXE_HW_UNDI;
UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/DebugSupportDxe/DebugSupportDxe/OUTPUT/X64/AsmFuncs.i:} PXE_SW_UNDI;
UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/DebugSupportDxe/DebugSupportDxe/OUTPUT/X64/AsmFuncs.i:  PXE_HW_UNDI hw;
UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/DebugSupportDxe/DebugSupportDxe/OUTPUT/X64/AsmFuncs.i:  PXE_SW_UNDI sw;
UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/DebugSupportDxe/DebugSupportDxe/OUTPUT/X64/AsmFuncs.i:} PXE_UNDI;
UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/EbcDxe/EbcDxe/OUTPUT/X64/EbcLowLevel.i:} PXE_HW_UNDI;
UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/EbcDxe/EbcDxe/OUTPUT/X64/EbcLowLevel.i:} PXE_SW_UNDI;
UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/EbcDxe/EbcDxe/OUTPUT/X64/EbcLowLevel.i:  PXE_HW_UNDI hw;
UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/EbcDxe/EbcDxe/OUTPUT/X64/EbcLowLevel.i:  PXE_SW_UNDI sw;
UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/MdeModulePkg/Universal/EbcDxe/EbcDxe/OUTPUT/X64/EbcLowLevel.i:} PXE_UNDI;
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/UefiPxe4BcDxe.debug matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/SnpDxe.efi matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/UefiPxe4BcDxe.efi matches
Binary file UDK-uefi-development-kit/MyWorkSpace/Build/MdeModule/DEBUG_GCC44/X64/SnpDxe.debug matches
UDK-uefi-development-kit/MyWorkSpace/QuarkPlatformPkg/Pci/Dxe/PciPlatform/PciPlatform.h:#define TANX_UNDI_OPTION_ROM_FILE_GUID \
UDK-uefi-development-kit/MyWorkSpace/QuarkPlatformPkg/Pci/Dxe/PciPlatform/PciPlatform.h:#define PXE_UNDI_OPTION_ROM_FILE_GUID \
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiDebug.h:#define EFI_D_UNDI        0x00010000          // UNDI Driver
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiDebug.h:#define EFI_D_LOADFILE    0x00020000          // UNDI Driver
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiDebug.h:                        EFI_D_BLKIO | EFI_D_NET | EFI_D_UNDI | EFI_D_VERBOSE)       
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI ROM ID and devive ID signature
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Return UNDI operational state.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Change UNDI operational state from Stopped to Started.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Change UNDI operational state from Started to Stopped.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Get UNDI initialization information.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Changed UNDI operational state from Started to Initialized.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Change the UNDI operational state from Initialized to Started.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Last valid PXE UNDI OpCode number.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Get State
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Start
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Stop
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Get Init Info
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Get Config Info
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Initialize
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Reset
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Shutdown
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Interrupt Enables
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Receive Filters
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Station Address
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Statistics
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI MCast IP to MAC
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI NvData
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Get Status
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// NICs and UNDIs may transmit multiple buffers per interrupt.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Fill Header
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Transmit
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// S/W UNDI only.  Return after the packet has been transmitted.  A
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:#define PXE_OPFLAGS_SWUNDI_TRANSMIT_OPMASK  0x0001
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Receive
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// implemented by all UNDIs.  COMMAND_QUEUED is only needed by UNDIs
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Get State
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Start
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Get Init Info
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Initialize
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Reset
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Shutdown
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Interrupt Enables
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Receive Filters
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Station Address
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Statistics
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI MCast IP to MAC
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI NvData
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Get Status
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Fill Header
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Transmit
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI Receive
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Common StatCodes returned by all UNDI commands, UNDI protocol functions
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:#define PXE_STATCODE_INVALID_UNDI         0x000F
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// This interface number must be passed to the S/W UNDI Start command.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// This interface number is returned by the S/W UNDI Get State and
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// Setting this flag directs the UNDI to queue this command for later
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// execution if the UNDI is busy and it supports command queuing.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// These two bit values are used to determine if there are more UNDI
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  UINT8   Len;            // sizeof(PXE_HW_UNDI)
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:} PXE_HW_UNDI;
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI operation state
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// If set, CDB identified in CDBaddr port is given to UNDI.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  UINT8   Len;            // sizeof(PXE_SW_UNDI)
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:} PXE_SW_UNDI;
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  PXE_HW_UNDI hw;
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  PXE_SW_UNDI sw;
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:} PXE_UNDI;
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:// UNDI command interface revision.  These are the values that get sent
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:#define PXE_ROMID_IMP_HW_UNDI                             0x80000000
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:    // See S/W UNDI ROMID structure definition for PCI and
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will never request a delay smaller than 10 microseconds
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // microseconds before returning control to the UNDI.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI may need to block multi-threaded/multi-processor access to
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // device.  To this end, a blocking service is needed by the UNDI.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // When UNDI needs a block, it will call Block() passing a non-zero
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // value.  When UNDI no longer needs a block, it will call Block()
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // do not return control to the UNDI until the previous Block() is
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will pass the virtual address of a buffer and the virtual
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will read or write the device io space using this call back
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will never request a delay smaller than 10 microseconds
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // microseconds before returning control to the UNDI.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI may need to block multi-threaded/multi-processor access to
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // device.  To this end, a blocking service is needed by the UNDI.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // When UNDI needs a block, it will call Block() passing a non-zero
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // value.  When UNDI no longer needs a block, it will call Block()
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // do not return control to the UNDI until the previous Block() is
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will pass the virtual address of a buffer and the virtual
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will read or write the device io space using this call back
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will pass the virtual address of a buffer, direction of the data
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will pass the virtual and mapped addresses of a buffer
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI will pass the virtual and mapped addresses of a buffer
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // protocol driver can provide anything for this Unique_ID, UNDI remembers
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // the Initialize command. Giving UNDI more memory will generally
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // If MemoryRequired is zero, the UNDI does not need and will not
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // this UNDI.  This information is needed when allocating receive
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // be allocated by the UNDI.  If MemoryRequired is non-zero, this
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // This identifies the PCI network device that this UNDI interface
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // This identifies the PCC network device that this UNDI interface
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // be in contiguous physical memory and cannot be swapped out.  The UNDI
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // default link speed (operation depends on UNDI/NIC functionality).
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // If these fields are set to zero, the UNDI will allocate buffer
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // the UNDI and network device do not use external memory buffers.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // Memory used by the UNDI and network device is allocated from the
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Include/EfiPxe.h:  // UNDI/NIC.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Library/EdkIIGlueLib/Include/Library/EdkIIGlueDebugLib.h:#undef EFI_D_UNDI
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Library/EdkIIGlueLib/Include/Library/EdkIIGlueDebugLib.h:#define DEBUG_UNDI      0x00010000  // UNDI Driver
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Library/EdkIIGlueLib/Include/Library/EdkIIGlueDebugLib.h:#define DEBUG_LOADFILE  0x00020000  // UNDI Driver
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Library/EdkIIGlueLib/Include/Library/EdkIIGlueDebugLib.h:#define EFI_D_UNDI      DEBUG_UNDI
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Efi/Protocol/EfiNetworkInterfaceIdentifier/EfiNetworkInterfaceIdentifier.h:  // For PXE/UNDI this is the first byte of the !PXE structure.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Efi/Protocol/EfiNetworkInterfaceIdentifier/EfiNetworkInterfaceIdentifier.h:  // For 16-bit UNDI, this is the first byte of the option ROM in
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Efi/Protocol/EfiNetworkInterfaceIdentifier/EfiNetworkInterfaceIdentifier.h:  // For 32/64-bit S/W UNDI, this is the first byte of the EFI ROM
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Efi/Protocol/EfiNetworkInterfaceIdentifier/EfiNetworkInterfaceIdentifier.h:  // For H/W UNDI, this is set to zero.
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Efi/Protocol/EfiNetworkInterfaceIdentifier/EfiNetworkInterfaceIdentifier.h:  // For EfiNetworkInterfaceUndi this field is "UNDI".
UDK-uefi-development-kit/MyWorkSpace/EdkCompatibilityPkg/Foundation/Efi/Protocol/PxeBaseCode/PxeBaseCode.h:#define EFI_PXE_BASE_CODE_BOOT_TYPE_DOSUNDI           3
UDK-uefi-development-kit/MyWorkSpace/AppPkg/Applications/Python/Ipf/pyconfig.h:#undef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/MyWorkSpace/AppPkg/Applications/Python/Python-2.7.10/Include/pyport.h:#if defined(X87_DOUBLE_ROUNDING) && !defined(HAVE_PY_SET_53BIT_PRECISION)
UDK-uefi-development-kit/MyWorkSpace/AppPkg/Applications/Python/Python-2.7.10/Include/pymath.h:#  ifdef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/MyWorkSpace/AppPkg/Applications/Python/Python-2.7.10/PyMod-2.7.10/Include/pyport.h:#if defined(X87_DOUBLE_ROUNDING) && !defined(HAVE_PY_SET_53BIT_PRECISION)
UDK-uefi-development-kit/MyWorkSpace/AppPkg/Applications/Python/Python-2.7.10/Python/pymath.c:#ifdef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/MyWorkSpace/AppPkg/Applications/Python/Python-2.7.10/Ia32/pyconfig.h:#undef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/MyWorkSpace/AppPkg/Applications/Python/Python-2.7.10/X64/pyconfig.h:#undef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/MyWorkSpace/AppPkg/Applications/Python/Python-2.7.2/Include/pyport.h:#if defined(X87_DOUBLE_ROUNDING) && !defined(HAVE_PY_SET_53BIT_PRECISION)
UDK-uefi-development-kit/MyWorkSpace/AppPkg/Applications/Python/Python-2.7.2/Include/pymath.h:#  ifdef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/MyWorkSpace/AppPkg/Applications/Python/Python-2.7.2/Lib/test/test_math.py:HAVE_DOUBLE_ROUNDING = (x + y == 1e16 + 4)
UDK-uefi-development-kit/MyWorkSpace/AppPkg/Applications/Python/Python-2.7.2/Lib/test/test_math.py:    @unittest.skipIf(HAVE_DOUBLE_ROUNDING,
UDK-uefi-development-kit/MyWorkSpace/AppPkg/Applications/Python/Python-2.7.2/Python/pymath.c:#ifdef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/MyWorkSpace/AppPkg/Applications/Python/PyMod-2.7.2/Include/pyport.h:#if defined(X87_DOUBLE_ROUNDING) && !defined(HAVE_PY_SET_53BIT_PRECISION)
UDK-uefi-development-kit/MyWorkSpace/AppPkg/Applications/Python/Ia32/pyconfig.h:#undef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/MyWorkSpace/AppPkg/Applications/Python/X64/pyconfig.h:#undef X87_DOUBLE_ROUNDING
UDK-uefi-development-kit/MyWorkSpace/BeagleBoardPkg/BeagleBoardPkg.dsc:#  DEBUG_UNDI      0x00010000  // UNDI Driver
